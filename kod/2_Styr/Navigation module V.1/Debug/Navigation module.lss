
Navigation module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800124  00800124  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001012  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a77  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098f  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000379  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003761  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	52 c0       	rjmp	.+164    	; 0x10e <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 32       	cpi	r26, 0x2F	; 47
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	14 d2       	rcall	.+1064   	; 0x4ec <main>
  c4:	4d c2       	rjmp	.+1178   	; 0x560 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_Styr_Slave>:
	}
	

	// Reset the sensor data buffer
	for (uint8_t i = 0; i < BUFFER_SIZE; ++i) {
		styr_data_buffer[i] = 0;
  c8:	85 ec       	ldi	r24, 0xC5	; 197
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <receive_Data>:
  d8:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e2:	e8 5d       	subi	r30, 0xD8	; 216
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 83       	st	Z, r24
  e8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
  f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  f6:	81 11       	cpse	r24, r1
  f8:	04 c0       	rjmp	.+8      	; 0x102 <receive_Data+0x2a>
  fa:	85 ec       	ldi	r24, 0xC5	; 197
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 100:	08 95       	ret
 102:	85 e8       	ldi	r24, 0x85	; 133
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 108:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 10c:	08 95       	ret

0000010e <__vector_26>:
	}
}


ISR(TWI_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0b b6       	in	r0, 0x3b	; 59
 11a:	0f 92       	push	r0
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	//TWI status flags
	switch (TW_STATUS) {
 134:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	80 39       	cpi	r24, 0x90	; 144
 13c:	09 f4       	brne	.+2      	; 0x140 <__vector_26+0x32>
 13e:	e4 c0       	rjmp	.+456    	; 0x308 <__vector_26+0x1fa>
 140:	b8 f4       	brcc	.+46     	; 0x170 <__vector_26+0x62>
 142:	80 37       	cpi	r24, 0x70	; 112
 144:	09 f4       	brne	.+2      	; 0x148 <__vector_26+0x3a>
 146:	b0 c0       	rjmp	.+352    	; 0x2a8 <__vector_26+0x19a>
 148:	48 f4       	brcc	.+18     	; 0x15c <__vector_26+0x4e>
 14a:	80 36       	cpi	r24, 0x60	; 96
 14c:	09 f4       	brne	.+2      	; 0x150 <__vector_26+0x42>
 14e:	a0 c0       	rjmp	.+320    	; 0x290 <__vector_26+0x182>
 150:	88 36       	cpi	r24, 0x68	; 104
 152:	09 f4       	brne	.+2      	; 0x156 <__vector_26+0x48>
 154:	a3 c0       	rjmp	.+326    	; 0x29c <__vector_26+0x18e>
 156:	81 11       	cpse	r24, r1
 158:	f9 c0       	rjmp	.+498    	; 0x34c <__vector_26+0x23e>
 15a:	ea c0       	rjmp	.+468    	; 0x330 <__vector_26+0x222>
 15c:	80 38       	cpi	r24, 0x80	; 128
 15e:	09 f4       	brne	.+2      	; 0x162 <__vector_26+0x54>
 160:	af c0       	rjmp	.+350    	; 0x2c0 <__vector_26+0x1b2>
 162:	88 38       	cpi	r24, 0x88	; 136
 164:	09 f4       	brne	.+2      	; 0x168 <__vector_26+0x5a>
 166:	c9 c0       	rjmp	.+402    	; 0x2fa <__vector_26+0x1ec>
 168:	88 37       	cpi	r24, 0x78	; 120
 16a:	09 f0       	breq	.+2      	; 0x16e <__vector_26+0x60>
 16c:	ef c0       	rjmp	.+478    	; 0x34c <__vector_26+0x23e>
 16e:	a2 c0       	rjmp	.+324    	; 0x2b4 <__vector_26+0x1a6>
 170:	80 3b       	cpi	r24, 0xB0	; 176
 172:	d1 f1       	breq	.+116    	; 0x1e8 <__vector_26+0xda>
 174:	48 f4       	brcc	.+18     	; 0x188 <__vector_26+0x7a>
 176:	80 3a       	cpi	r24, 0xA0	; 160
 178:	09 f4       	brne	.+2      	; 0x17c <__vector_26+0x6e>
 17a:	e0 c0       	rjmp	.+448    	; 0x33c <__vector_26+0x22e>
 17c:	88 3a       	cpi	r24, 0xA8	; 168
 17e:	99 f0       	breq	.+38     	; 0x1a6 <__vector_26+0x98>
 180:	88 39       	cpi	r24, 0x98	; 152
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_26+0x78>
 184:	e3 c0       	rjmp	.+454    	; 0x34c <__vector_26+0x23e>
 186:	c7 c0       	rjmp	.+398    	; 0x316 <__vector_26+0x208>
 188:	80 3c       	cpi	r24, 0xC0	; 192
 18a:	09 f4       	brne	.+2      	; 0x18e <__vector_26+0x80>
 18c:	75 c0       	rjmp	.+234    	; 0x278 <__vector_26+0x16a>
 18e:	20 f4       	brcc	.+8      	; 0x198 <__vector_26+0x8a>
 190:	88 3b       	cpi	r24, 0xB8	; 184
 192:	09 f4       	brne	.+2      	; 0x196 <__vector_26+0x88>
 194:	4b c0       	rjmp	.+150    	; 0x22c <__vector_26+0x11e>
 196:	da c0       	rjmp	.+436    	; 0x34c <__vector_26+0x23e>
 198:	88 3c       	cpi	r24, 0xC8	; 200
 19a:	09 f4       	brne	.+2      	; 0x19e <__vector_26+0x90>
 19c:	73 c0       	rjmp	.+230    	; 0x284 <__vector_26+0x176>
 19e:	88 3f       	cpi	r24, 0xF8	; 248
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__vector_26+0x96>
 1a2:	c0 c0       	rjmp	.+384    	; 0x324 <__vector_26+0x216>
 1a4:	d3 c0       	rjmp	.+422    	; 0x34c <__vector_26+0x23e>
		//Case TWI slave transfer slave_address (0xA8)
		case TW_ST_SLA_ACK:
		if (styr_index == BUFFER_SIZE - 1) {
 1a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <styr_index>
 1aa:	81 11       	cpse	r24, r1
 1ac:	10 c0       	rjmp	.+32     	; 0x1ce <__vector_26+0xc0>
			TWDR = styr_data_buffer[styr_index];
 1ae:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e9 5d       	subi	r30, 0xD9	; 217
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	80 81       	ld	r24, Z
 1ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			styr_index = 0;
 1be:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <styr_index>
			// If it's the last byte, prepare to send NACK
			TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1c2:	85 e8       	ldi	r24, 0x85	; 133
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 1;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <__vector_26+0xda>
			
		}
		else {
			TWDR = styr_data_buffer[styr_index];
 1ce:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e9 5d       	subi	r30, 0xD9	; 217
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 81       	ld	r24, Z
 1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			//styr_index++;
			// If it's not the last byte, send ACK
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1de:	85 ec       	ldi	r24, 0xC5	; 197
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 2;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	85 b9       	out	0x05, r24	; 5
		}

		
		//Case (0xB0) Arbitration lost in Slave Transmit, SLA received with ACK
		case TW_ST_ARB_LOST_SLA_ACK:
		if (styr_index == BUFFER_SIZE - 1) {
 1e8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <styr_index>
 1ec:	81 11       	cpse	r24, r1
 1ee:	10 c0       	rjmp	.+32     	; 0x210 <__vector_26+0x102>
			TWDR = styr_data_buffer[styr_index];
 1f0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e9 5d       	subi	r30, 0xD9	; 217
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			styr_index = 0;
 200:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <styr_index>
			// If it's the last byte, prepare to send NACK
			TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 204:	85 e8       	ldi	r24, 0x85	; 133
 206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 3;
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	a0 c0       	rjmp	.+320    	; 0x350 <__vector_26+0x242>
			;
		}
		else {
			TWDR = styr_data_buffer[styr_index];
 210:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e9 5d       	subi	r30, 0xD9	; 217
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	80 81       	ld	r24, Z
 21c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			//styr_index++;
			// If it's not the last byte, send ACK
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 220:	85 ec       	ldi	r24, 0xC5	; 197
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 4;
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	85 b9       	out	0x05, r24	; 5
 22a:	92 c0       	rjmp	.+292    	; 0x350 <__vector_26+0x242>
		}
		break;
		
		//Case (0xB8) TWI slave transfer data
		case TW_ST_DATA_ACK:
		if (styr_index == BUFFER_SIZE - 1) {
 22c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <styr_index>
 230:	81 11       	cpse	r24, r1
 232:	10 c0       	rjmp	.+32     	; 0x254 <__vector_26+0x146>
			TWDR = styr_data_buffer[styr_index];
 234:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e9 5d       	subi	r30, 0xD9	; 217
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			styr_index = 0;
 244:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <styr_index>
			// If it's the last byte, prepare to send NACK
			TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 248:	85 e8       	ldi	r24, 0x85	; 133
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 5;
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	85 b9       	out	0x05, r24	; 5
 252:	12 c0       	rjmp	.+36     	; 0x278 <__vector_26+0x16a>
			
		}
		else {
			TWDR = styr_data_buffer[styr_index];
 254:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <styr_index>
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e9 5d       	subi	r30, 0xD9	; 217
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 81       	ld	r24, Z
 260:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			styr_index++;
 264:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <styr_index>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <styr_index>
			// If it's not the last byte, send ACK
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 26e:	85 ec       	ldi	r24, 0xC5	; 197
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 6;
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	85 b9       	out	0x05, r24	; 5
			
		}
		//case (0xC0)
		case TW_ST_DATA_NACK:
		// Release the TWI peripheral to be ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 278:	85 ec       	ldi	r24, 0xC5	; 197
 27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 7;
 27e:	87 e0       	ldi	r24, 0x07	; 7
 280:	85 b9       	out	0x05, r24	; 5
		
		break;
 282:	66 c0       	rjmp	.+204    	; 0x350 <__vector_26+0x242>
		//case 0xC8
		case TW_ST_LAST_DATA:
		
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
 284:	85 ec       	ldi	r24, 0xC5	; 197
 286:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 8;
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	85 b9       	out	0x05, r24	; 5
		break;
 28e:	60 c0       	rjmp	.+192    	; 0x350 <__vector_26+0x242>

		//case 0x60 TWI slave receiver slave_address
		case TW_SR_SLA_ACK:
		// Set TWI status to receive mode with acknowledgment (ACK)
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 290:	85 ec       	ldi	r24, 0xC5	; 197
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 9;
 296:	89 e0       	ldi	r24, 0x09	; 9
 298:	85 b9       	out	0x05, r24	; 5
		break;
 29a:	5a c0       	rjmp	.+180    	; 0x350 <__vector_26+0x242>

		//Case 0x68
		case TW_SR_ARB_LOST_SLA_ACK:
		// Release the TWI peripheral to be ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 29c:	85 ec       	ldi	r24, 0xC5	; 197
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 10;
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	85 b9       	out	0x05, r24	; 5
		break;
 2a6:	54 c0       	rjmp	.+168    	; 0x350 <__vector_26+0x242>
		//case 0x70
		case TW_SR_GCALL_ACK:
		// Set TWI status to receive mode with acknowledgment
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2a8:	85 ec       	ldi	r24, 0xC5	; 197
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 11;
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	85 b9       	out	0x05, r24	; 5
		break;
 2b2:	4e c0       	rjmp	.+156    	; 0x350 <__vector_26+0x242>
		//case 0x78
		case TW_SR_ARB_LOST_GCALL_ACK:
		// Release the TWI peripheral to be ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2b4:	85 ec       	ldi	r24, 0xC5	; 197
 2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 12;
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	85 b9       	out	0x05, r24	; 5
		break;
 2be:	48 c0       	rjmp	.+144    	; 0x350 <__vector_26+0x242>
		
		//case 0x80
		case TW_SR_DATA_ACK:
		// Read received data and send ACK for the next byte
		received_data_buffer[received_index] = TWDR;
 2c0:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2ca:	e8 5d       	subi	r30, 0xD8	; 216
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 83       	st	Z, r24

		// Increment the index for the next received byte
		received_index = (received_index + 1);
 2d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>

		if (received_index < (BUFFER_SIZE)) {
 2da:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 2de:	81 11       	cpse	r24, r1
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <__vector_26+0x1e0>
			// If it's not the last byte, send ACK
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2e2:	85 ec       	ldi	r24, 0xC5	; 197
 2e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 13;
 2e8:	8d e0       	ldi	r24, 0x0D	; 13
 2ea:	85 b9       	out	0x05, r24	; 5
 2ec:	31 c0       	rjmp	.+98     	; 0x350 <__vector_26+0x242>
		}
		else {
			// If it's the last byte, prepare to send NACK
			TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2ee:	85 e8       	ldi	r24, 0x85	; 133
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 14;
 2f4:	8e e0       	ldi	r24, 0x0E	; 14
 2f6:	85 b9       	out	0x05, r24	; 5
 2f8:	2b c0       	rjmp	.+86     	; 0x350 <__vector_26+0x242>
		break;

		//case 0x88
		case TW_SR_DATA_NACK:
		// Receive data
		receive_Data();
 2fa:	ee de       	rcall	.-548    	; 0xd8 <receive_Data>
		// Set TWI status to ready for a new start condition
		//received_index = 0;
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2fc:	85 ec       	ldi	r24, 0xC5	; 197
 2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 15;
 302:	8f e0       	ldi	r24, 0x0F	; 15
 304:	85 b9       	out	0x05, r24	; 5
		
		break;
		//case 0x90
		case TW_SR_GCALL_DATA_ACK:
		receive_Data();
 306:	24 c0       	rjmp	.+72     	; 0x350 <__vector_26+0x242>
 308:	e7 de       	rcall	.-562    	; 0xd8 <receive_Data>
		PORTB = 16;
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	85 b9       	out	0x05, r24	; 5
		// Set TWI status to ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 30e:	85 ec       	ldi	r24, 0xC5	; 197
 310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;

		//case 0x98
		case TW_SR_GCALL_DATA_NACK:
		receive_Data();
 314:	1d c0       	rjmp	.+58     	; 0x350 <__vector_26+0x242>
 316:	e0 de       	rcall	.-576    	; 0xd8 <receive_Data>
		// Set TWI status to ready for a new start condition
		//received_index = 0;
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 318:	85 ec       	ldi	r24, 0xC5	; 197
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 17;
 31e:	81 e1       	ldi	r24, 0x11	; 17
 320:	85 b9       	out	0x05, r24	; 5
		break;
		//case 0xF8
		case TW_NO_INFO:
		printf("TWI slave device did not respond\n");
 322:	16 c0       	rjmp	.+44     	; 0x350 <__vector_26+0x242>
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	eb d0       	rcall	.+470    	; 0x500 <puts>
		PORTB = 18;
 32a:	82 e1       	ldi	r24, 0x12	; 18
 32c:	85 b9       	out	0x05, r24	; 5
		break;
 32e:	10 c0       	rjmp	.+32     	; 0x350 <__vector_26+0x242>
		//case 0x00
		case TW_BUS_ERROR:
		// Release the internal hardware and clear TWSTO
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 330:	85 ec       	ldi	r24, 0xC5	; 197
 332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		PORTB = 19;
 336:	83 e1       	ldi	r24, 0x13	; 19
 338:	85 b9       	out	0x05, r24	; 5
		break;
 33a:	0a c0       	rjmp	.+20     	; 0x350 <__vector_26+0x242>
		
		//In the case where a STOP condition or repeated START condition has been received while still addressed as a slave
		case TW_SR_STOP:
		PORTB = 20;
 33c:	84 e1       	ldi	r24, 0x14	; 20
 33e:	85 b9       	out	0x05, r24	; 5
		// Set TWI status to ready for a new start condition
		received_index = 0;
 340:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 344:	85 ec       	ldi	r24, 0xC5	; 197
 346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 34a:	02 c0       	rjmp	.+4      	; 0x350 <__vector_26+0x242>

		default:
		PORTB = 21;
 34c:	85 e1       	ldi	r24, 0x15	; 21
 34e:	85 b9       	out	0x05, r24	; 5
		
		break;
	}

	// Clear the TWI interrupt flag
	TWCR |= (1 << TWINT);
 350:	ec eb       	ldi	r30, 0xBC	; 188
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <init_i2c_slave>:

int init_i2c_slave()
{
	init_Styr_Slave();
 380:	a3 de       	rcall	.-698    	; 0xc8 <init_Styr_Slave>
 382:	ff cf       	rjmp	.-2      	; 0x382 <init_i2c_slave+0x2>

00000384 <init_PWM>:
/* 2. Set specific PWM frequency on timer clock for our timer */
/* 3. Specifying the mode of operation to fast PWM */

void init_PWM(void)
{	
	DDRB |= (1 << PB3) | (1 << PB4); // Point 1
 384:	84 b1       	in	r24, 0x04	; 4
 386:	88 61       	ori	r24, 0x18	; 24
 388:	84 b9       	out	0x04, r24	; 4
	DDRA |= 0xFF; // For direction
 38a:	81 b1       	in	r24, 0x01	; 1
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	81 b9       	out	0x01, r24	; 1
	
	TCCR0B |= (1<<CS01); // Point 2 - CLK_IO/8
 390:	85 b5       	in	r24, 0x25	; 37
 392:	82 60       	ori	r24, 0x02	; 2
 394:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A |= (1<<WGM01) | (1<<WGM00); // Point 3 - MODE 3 (Fast PWM)
 396:	84 b5       	in	r24, 0x24	; 36
 398:	83 60       	ori	r24, 0x03	; 3
 39a:	84 bd       	out	0x24, r24	; 36
 39c:	08 95       	ret

0000039e <move_forward>:
}

void setSpeed(uint8_t currentSpeed_r, uint8_t currentSpeed_l)
{
	OCR0A = currentSpeed_r;
	OCR0B = currentSpeed_l;
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 3a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a8:	84 b5       	in	r24, 0x24	; 36
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	84 bd       	out	0x24, r24	; 36
 3ae:	84 b5       	in	r24, 0x24	; 36
 3b0:	80 62       	ori	r24, 0x20	; 32
 3b2:	84 bd       	out	0x24, r24	; 36
 3b4:	82 b1       	in	r24, 0x02	; 2
 3b6:	83 60       	ori	r24, 0x03	; 3
 3b8:	82 b9       	out	0x02, r24	; 2
 3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 3c2:	97 bd       	out	0x27, r25	; 39
 3c4:	88 bd       	out	0x28, r24	; 40
 3c6:	08 95       	ret

000003c8 <move_backward>:
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 3ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d2:	84 b5       	in	r24, 0x24	; 36
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	84 bd       	out	0x24, r24	; 36
 3d8:	84 b5       	in	r24, 0x24	; 36
 3da:	80 62       	ori	r24, 0x20	; 32
 3dc:	84 bd       	out	0x24, r24	; 36
 3de:	82 b1       	in	r24, 0x02	; 2
 3e0:	82 b9       	out	0x02, r24	; 2
 3e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 3ea:	97 bd       	out	0x27, r25	; 39
 3ec:	88 bd       	out	0x28, r24	; 40
 3ee:	08 95       	ret

000003f0 <move_right>:
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fa:	84 b5       	in	r24, 0x24	; 36
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	84 bd       	out	0x24, r24	; 36
 400:	84 b5       	in	r24, 0x24	; 36
 402:	80 62       	ori	r24, 0x20	; 32
 404:	84 bd       	out	0x24, r24	; 36
 406:	10 9a       	sbi	0x02, 0	; 2
 408:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 410:	97 bd       	out	0x27, r25	; 39
 412:	88 bd       	out	0x28, r24	; 40
 414:	08 95       	ret

00000416 <move_left>:
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 41c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 420:	84 b5       	in	r24, 0x24	; 36
 422:	80 68       	ori	r24, 0x80	; 128
 424:	84 bd       	out	0x24, r24	; 36
 426:	84 b5       	in	r24, 0x24	; 36
 428:	80 62       	ori	r24, 0x20	; 32
 42a:	84 bd       	out	0x24, r24	; 36
 42c:	11 9a       	sbi	0x02, 1	; 2
 42e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 432:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 436:	97 bd       	out	0x27, r25	; 39
 438:	88 bd       	out	0x28, r24	; 40
 43a:	08 95       	ret

0000043c <move_slight_r>:
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 442:	80 e4       	ldi	r24, 0x40	; 64
 444:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 448:	84 b5       	in	r24, 0x24	; 36
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	84 bd       	out	0x24, r24	; 36
 44e:	84 b5       	in	r24, 0x24	; 36
 450:	80 62       	ori	r24, 0x20	; 32
 452:	84 bd       	out	0x24, r24	; 36
 454:	82 b1       	in	r24, 0x02	; 2
 456:	83 60       	ori	r24, 0x03	; 3
 458:	82 b9       	out	0x02, r24	; 2
 45a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 462:	97 bd       	out	0x27, r25	; 39
 464:	88 bd       	out	0x28, r24	; 40
 466:	08 95       	ret

00000468 <move_slight_l>:
 468:	80 e4       	ldi	r24, 0x40	; 64
 46a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheelpair_speed_right>
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 474:	84 b5       	in	r24, 0x24	; 36
 476:	80 68       	ori	r24, 0x80	; 128
 478:	84 bd       	out	0x24, r24	; 36
 47a:	84 b5       	in	r24, 0x24	; 36
 47c:	80 62       	ori	r24, 0x20	; 32
 47e:	84 bd       	out	0x24, r24	; 36
 480:	82 b1       	in	r24, 0x02	; 2
 482:	83 60       	ori	r24, 0x03	; 3
 484:	82 b9       	out	0x02, r24	; 2
 486:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <wheelpair_speed_right>
 48e:	97 bd       	out	0x27, r25	; 39
 490:	88 bd       	out	0x28, r24	; 40
 492:	08 95       	ret

00000494 <move_man>:
///////////////////////////////////////////////////////////////////////////////////////////
/* Function for keybinds to move manually (W-A-S-D) */

void move_man(uint8_t DIRECTION)
{
	switch (DIRECTION)
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	91 f0       	breq	.+36     	; 0x4bc <move_man+0x28>
 498:	28 f4       	brcc	.+10     	; 0x4a4 <move_man+0x10>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	49 f0       	breq	.+18     	; 0x4b0 <move_man+0x1c>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	51 f0       	breq	.+20     	; 0x4b6 <move_man+0x22>
 4a2:	08 95       	ret
 4a4:	85 30       	cpi	r24, 0x05	; 5
 4a6:	81 f0       	breq	.+32     	; 0x4c8 <move_man+0x34>
 4a8:	60 f0       	brcs	.+24     	; 0x4c2 <move_man+0x2e>
 4aa:	86 30       	cpi	r24, 0x06	; 6
 4ac:	81 f0       	breq	.+32     	; 0x4ce <move_man+0x3a>
 4ae:	08 95       	ret
	{
		case 1: // Forward
			move_forward(DIRECTION);
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	75 cf       	rjmp	.-278    	; 0x39e <move_forward>
		break;
 4b4:	08 95       	ret
	
		case 2: // Reverse
			move_backward(DIRECTION);
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	87 cf       	rjmp	.-242    	; 0x3c8 <move_backward>
		break;

		case 3: // Right 360 degree rotation
			move_right(DIRECTION);
 4ba:	08 95       	ret
 4bc:	83 e0       	ldi	r24, 0x03	; 3
		break;
 4be:	98 cf       	rjmp	.-208    	; 0x3f0 <move_right>

		case 4: // Left 360 degree rotation
			move_left(DIRECTION);
 4c0:	08 95       	ret
 4c2:	84 e0       	ldi	r24, 0x04	; 4
		break;
 4c4:	a8 cf       	rjmp	.-176    	; 0x416 <move_left>

		case 5: // Slight right turn - 60 degrees
			move_slight_r(DIRECTION);
 4c6:	08 95       	ret
 4c8:	85 e0       	ldi	r24, 0x05	; 5
		break;
 4ca:	b8 cf       	rjmp	.-144    	; 0x43c <move_slight_r>

		case 6: // Slight left turn - 60 degrees
			move_slight_l(DIRECTION);
 4cc:	08 95       	ret
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	cb cf       	rjmp	.-106    	; 0x468 <move_slight_l>
 4d2:	08 95       	ret

000004d4 <sumo_init>:
///////////////////////////////////////////////////////////////////////////////////////////
/* Functions */

bool sumo_init() /* Init function for Sumo-robot */
{
	sei();
 4d4:	78 94       	sei
	init_PWM();
 4d6:	56 df       	rcall	.-340    	; 0x384 <init_PWM>
	init_i2c_slave();
 4d8:	53 df       	rcall	.-346    	; 0x380 <init_i2c_slave>
 4da:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
}
 4dc:	08 95       	ret

000004de <sumo_initialized>:
 4de:	fa df       	rcall	.-12     	; 0x4d4 <sumo_init>

void sumo_initialized() /* Is sumo initialized, yes or no? */
{
	if(!sumo_init()) /* If not, then exit in switch-case */
 4e0:	81 11       	cpse	r24, r1
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <sumo_initialized+0xc>
	{
		man_or_auto = 3;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <man_or_auto>
 4ea:	08 95       	ret

000004ec <main>:
///////////////////////////////////////////////////////////////////////////////////////////
/* Main-functions for driving Sumo */

int main(void)
{
	sumo_init();
 4ec:	f3 df       	rcall	.-26     	; 0x4d4 <sumo_init>
	sumo_initialized();
 4ee:	f7 df       	rcall	.-18     	; 0x4de <sumo_initialized>
 4f0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <received_data_buffer>

	DIRECTION = received_data_buffer[0];
 4f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <DIRECTION>
 4f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <DIRECTION>

	while(1)
	{
		move_man(DIRECTION);
 4fc:	cb df       	rcall	.-106    	; 0x494 <move_man>
 4fe:	fc cf       	rjmp	.-8      	; 0x4f8 <main+0xc>

00000500 <puts>:
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__iob+0x2>
 50c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__iob+0x3>
 510:	23 81       	ldd	r18, Z+3	; 0x03
 512:	21 ff       	sbrs	r18, 1
 514:	1b c0       	rjmp	.+54     	; 0x54c <puts+0x4c>
 516:	8c 01       	movw	r16, r24
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	f8 01       	movw	r30, r16
 51e:	81 91       	ld	r24, Z+
 520:	8f 01       	movw	r16, r30
 522:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__iob+0x2>
 526:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <__iob+0x3>
 52a:	db 01       	movw	r26, r22
 52c:	18 96       	adiw	r26, 0x08	; 8
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	19 97       	sbiw	r26, 0x09	; 9
 534:	88 23       	and	r24, r24
 536:	31 f0       	breq	.+12     	; 0x544 <puts+0x44>
 538:	09 95       	icall
 53a:	89 2b       	or	r24, r25
 53c:	79 f3       	breq	.-34     	; 0x51c <puts+0x1c>
 53e:	df ef       	ldi	r29, 0xFF	; 255
 540:	cf ef       	ldi	r28, 0xFF	; 255
 542:	ec cf       	rjmp	.-40     	; 0x51c <puts+0x1c>
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	09 95       	icall
 548:	89 2b       	or	r24, r25
 54a:	19 f0       	breq	.+6      	; 0x552 <puts+0x52>
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	9f ef       	ldi	r25, 0xFF	; 255
 550:	02 c0       	rjmp	.+4      	; 0x556 <puts+0x56>
 552:	8d 2f       	mov	r24, r29
 554:	9c 2f       	mov	r25, r28
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
