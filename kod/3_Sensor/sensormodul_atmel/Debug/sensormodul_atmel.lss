
sensormodul_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800124  00800124  000005dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114a  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae8  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000801  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002b30  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 10 .debug_str    00000672  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002eb  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003611  2**0
=======
 10 .debug_str    0000070b  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dd  00000000  00000000  000039d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003eb4  2**0
>>>>>>> aeac1229ae6da073764343ba8832d38d8c4a659c
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	ef c0       	rjmp	.+478    	; 0x248 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 34       	cpi	r26, 0x47	; 71
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	78 d0       	rcall	.+240    	; 0x1b4 <main>
  c4:	2d c2       	rjmp	.+1114   	; 0x520 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

<<<<<<< HEAD
000000c8 <initilize_ports>:
}

*/
void initilize_ports(){
	// Initilize the input pins to IR sensors and reflex sensors
	DDRA &= ~(1 << IR1_30_INPUT_PIN | 1 << IR2_30_INPUT_PIN |1 << IR_80_INPUT_PIN);
  c8:	81 b1       	in	r24, 0x01	; 1
  ca:	8a 7e       	andi	r24, 0xEA	; 234
  cc:	81 b9       	out	0x01, r24	; 1
	
	//------------------------------------------------------------
	//Initilize digital pins for reflex sensor
	DDRA &= ~(1 << REFLEX1_INPUT_PIN) | (1 << REFLEX2_INPUT_PIN);
  ce:	0e 98       	cbi	0x01, 6	; 1
	// Enable pull-up resistor for above
	PORTA |= (1 << REFLEX1_INPUT_PIN) | (1 << REFLEX2_INPUT_PIN);
  d0:	82 b1       	in	r24, 0x02	; 2
  d2:	80 6c       	ori	r24, 0xC0	; 192
  d4:	82 b9       	out	0x02, r24	; 2
  d6:	08 95       	ret

000000d8 <init_ADC>:
}

// Initializing for ADC
void init_ADC(){
	// Set 5V internal ref
	ADMUX &= ~(1<< REFS1);
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8f 77       	andi	r24, 0x7F	; 127
  e0:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0);
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	// Set Result left adjusted -- changed to right
	ADMUX &= ~(1 << ADLAR);
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	80 83       	st	Z, r24
	// Activate ADC
	ADCSRA |= (1 << ADEN);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 83       	st	Z, r24
	//Disable auto-trigger
	ADCSRA &= ~(1<<ADATE);
  f8:	80 81       	ld	r24, Z
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 83       	st	Z, r24
	//Enable interupt from ADC,
	ADCSRA |= (1 << ADIE);
  fe:	80 81       	ld	r24, Z
 100:	88 60       	ori	r24, 0x08	; 8
 102:	80 83       	st	Z, r24
	//Set ADC frequency division factor
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret
=======
000000c8 <timer_setup>:
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
  d2:	af e6       	ldi	r26, 0x6F	; 111
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	8c 91       	ld	r24, X
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8c 93       	st	X, r24
  dc:	8f e7       	ldi	r24, 0x7F	; 127
  de:	9e e3       	ldi	r25, 0x3E	; 62
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	89 7f       	andi	r24, 0xF9	; 249
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <initilize_ports>:
  f6:	81 b1       	in	r24, 0x01	; 1
  f8:	8a 7e       	andi	r24, 0xEA	; 234
  fa:	81 b9       	out	0x01, r24	; 1
  fc:	0e 98       	cbi	0x01, 6	; 1
  fe:	82 b1       	in	r24, 0x02	; 2
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	82 b9       	out	0x02, r24	; 2
 104:	08 95       	ret

00000106 <init_ADC>:
 106:	ec e7       	ldi	r30, 0x7C	; 124
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
 116:	80 81       	ld	r24, Z
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	80 83       	st	Z, r24
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 68       	ori	r24, 0x80	; 128
 124:	80 83       	st	Z, r24
 126:	80 81       	ld	r24, Z
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	80 83       	st	Z, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	80 83       	st	Z, r24
 132:	80 81       	ld	r24, Z
 134:	86 60       	ori	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
 138:	08 95       	ret
>>>>>>> aeac1229ae6da073764343ba8832d38d8c4a659c

0000010c <init>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
<<<<<<< HEAD
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	a8 95       	wdr
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 120:	0f be       	out	0x3f, r0	; 63
#include "init.h"
#include "sensor_slave.h"

void init(){
	wdt_disable();
	initilize_ports();
 122:	d2 df       	rcall	.-92     	; 0xc8 <initilize_ports>
	init_ADC();
 124:	d9 df       	rcall	.-78     	; 0xd8 <init_ADC>
	//interupt_init();
	init_Sensor_Slave();
 126:	6e d0       	rcall	.+220    	; 0x204 <init_Sensor_Slave>
 128:	78 94       	sei
	//sensor_index=0;
	//received_index=0;
	//timer_setup();
	sei();
 12a:	83 e0       	ldi	r24, 0x03	; 3
	lastADCReflex1 = STATE_FIRST_RUN;
 12c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <lastADCReflex1>
 130:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <lastADCReflex2>
	lastADCReflex2 = STATE_FIRST_RUN;
 134:	08 95       	ret

00000136 <ADC_init>:
 136:	80 e4       	ldi	r24, 0x40	; 64
uint8_t first_read_PA6 = 1;      // Flag for the first read for PA6
uint8_t first_read_PA7 = 1;

void ADC_init() {
	// Set reference voltage and prescaler
	ADMUX = (1 << REFS0); // AVcc as reference
 138:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC and set prescaler
 13c:	87 e8       	ldi	r24, 0x87	; 135
 13e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 142:	08 95       	ret

00000144 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07); // Select ADC channel
 144:	ec e7       	ldi	r30, 0x7C	; 124
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	98 7f       	andi	r25, 0xF8	; 248
 14c:	87 70       	andi	r24, 0x07	; 7
 14e:	89 2b       	or	r24, r25
 150:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start conversion
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Wait for conversion to complete
 15c:	80 81       	ld	r24, Z
 15e:	86 fd       	sbrc	r24, 6
 160:	fd cf       	rjmp	.-6      	; 0x15c <ADC_read+0x18>
	return ADC;
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 16a:	08 95       	ret

0000016c <process_odometer>:

void process_odometer(uint8_t channel, volatile uint8_t *count, uint8_t *last_state, uint8_t *first_read) {
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7b 01       	movw	r14, r22
 17a:	ea 01       	movw	r28, r20
 17c:	89 01       	movw	r16, r18
	uint16_t adc_value = ADC_read(channel);
 17e:	e2 df       	rcall	.-60     	; 0x144 <ADC_read>
	uint8_t current_state = (adc_value > THRESHOLD) ? 1 : 0;
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	92 40       	sbci	r25, 0x02	; 2
 186:	08 f4       	brcc	.+2      	; 0x18a <process_odometer+0x1e>
 188:	20 e0       	ldi	r18, 0x00	; 0

	if (*first_read) {
 18a:	f8 01       	movw	r30, r16
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	11 f0       	breq	.+4      	; 0x196 <process_odometer+0x2a>
		*first_read = 0; // Clear the first read flag after the first read
 192:	10 82       	st	Z, r1
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <process_odometer+0x38>
		} else if (*last_state != current_state) {
 196:	88 81       	ld	r24, Y
 198:	28 17       	cp	r18, r24
 19a:	21 f0       	breq	.+8      	; 0x1a4 <process_odometer+0x38>
		*count += 1; // Increment counter on state change
 19c:	f7 01       	movw	r30, r14
 19e:	80 81       	ld	r24, Z
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 83       	st	Z, r24
	}
	
	*last_state = current_state;
 1a4:	28 83       	st	Y, r18
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <main>:

int main(void) {
	 // Initialize ADC
	MCUSR_data |= MCUSR;
 1b4:	94 b7       	in	r25, 0x34	; 52
 1b6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <MCUSR_data>
 1ba:	89 2b       	or	r24, r25
 1bc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <MCUSR_data>
	DDRB = 0XFF;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	84 b9       	out	0x04, r24	; 4

	init();
 1c4:	a3 df       	rcall	.-186    	; 0x10c <init>
	ADC_init();
 1c6:	b7 df       	rcall	.-146    	; 0x136 <ADC_init>
 1c8:	c1 e3       	ldi	r28, 0x31	; 49
	//uint8_t lowByteLeftDist = (uint8_t)(leftWheelDistance  & 0xFF); // Split data up to two bytes, low part
	
	//uint8_t highByteRightDist = (uint8_t)(rightWheelDistance >> 8); // Split data up to two bytes, high part
	//uint8_t lowByteRightDist = (uint8_t)(rightWheelDistance  & 0xFF); // Split data up to two bytes, low part
	
	sensor_data_buffer[0] = leftCountMarks;// highByteLeftDist;
 1ca:	d1 e0       	ldi	r29, 0x01	; 1
 1cc:	21 e0       	ldi	r18, 0x01	; 1

	init();
	ADC_init();
	while (1) {
		// Process each odometer
		process_odometer(6, &count_PA6, &last_state_PA6, &first_read_PA6); // PA6
 1ce:	31 e0       	ldi	r19, 0x01	; 1
 1d0:	45 e2       	ldi	r20, 0x25	; 37
 1d2:	51 e0       	ldi	r21, 0x01	; 1
 1d4:	67 e2       	ldi	r22, 0x27	; 39
 1d6:	71 e0       	ldi	r23, 0x01	; 1
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	c8 df       	rcall	.-112    	; 0x16c <process_odometer>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
		process_odometer(7, &count_PA7, &last_state_PA7, &first_read_PA7); // PA7
 1de:	31 e0       	ldi	r19, 0x01	; 1
 1e0:	44 e2       	ldi	r20, 0x24	; 36
 1e2:	51 e0       	ldi	r21, 0x01	; 1
 1e4:	66 e2       	ldi	r22, 0x26	; 38
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	c0 df       	rcall	.-128    	; 0x16c <process_odometer>
 1ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count_PA7>
		packData(count_PA6, count_PA7);
 1f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <count_PA6>
 1f4:	98 83       	st	Y, r25
	//uint8_t lowByteLeftDist = (uint8_t)(leftWheelDistance  & 0xFF); // Split data up to two bytes, low part
	
	//uint8_t highByteRightDist = (uint8_t)(rightWheelDistance >> 8); // Split data up to two bytes, high part
	//uint8_t lowByteRightDist = (uint8_t)(rightWheelDistance  & 0xFF); // Split data up to two bytes, low part
	
	sensor_data_buffer[0] = leftCountMarks;// highByteLeftDist;
 1f6:	89 83       	std	Y+1, r24	; 0x01
	sensor_data_buffer[1] = rightCountMarks; //lowByteLeftDist;
 1f8:	e9 cf       	rjmp	.-46     	; 0x1cc <main+0x18>

000001fa <reset_distance_buff>:
 1fa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <count_PA6>
	
}
*/
void reset_distance_buff(){
	count_PA6 = 0; // Counter for odometer on PA6
	count_PA7 = 0;
 1fe:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <count_PA7>
 202:	08 95       	ret

00000204 <init_Sensor_Slave>:
=======
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	a8 95       	wdr
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 144:	88 61       	ori	r24, 0x18	; 24
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 14e:	0f be       	out	0x3f, r0	; 63
 150:	d2 df       	rcall	.-92     	; 0xf6 <initilize_ports>
 152:	d9 df       	rcall	.-78     	; 0x106 <init_ADC>
 154:	a6 d1       	rcall	.+844    	; 0x4a2 <init_Sensor_Slave>
 156:	b8 df       	rcall	.-144    	; 0xc8 <timer_setup>
 158:	78 94       	sei
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <lastADCReflex1>
 160:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <lastADCReflex2>
 164:	08 95       	ret

00000166 <packData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <packData+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <packData+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9a 83       	std	Y+2, r25	; 0x02
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	7c 83       	std	Y+4, r23	; 0x04
 178:	6b 83       	std	Y+3, r22	; 0x03
 17a:	69 81       	ldd	r22, Y+1	; 0x01
 17c:	7a 81       	ldd	r23, Y+2	; 0x02
 17e:	49 81       	ldd	r20, Y+1	; 0x01
 180:	5a 81       	ldd	r21, Y+2	; 0x02
 182:	2b 81       	ldd	r18, Y+3	; 0x03
 184:	3c 81       	ldd	r19, Y+4	; 0x04
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	ec e2       	ldi	r30, 0x2C	; 44
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	70 83       	st	Z, r23
 190:	41 83       	std	Z+1, r20	; 0x01
 192:	32 83       	std	Z+2, r19	; 0x02
 194:	83 83       	std	Z+3, r24	; 0x03
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <__vector_default>:
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__vector_default+0xa>

000001b0 <adcPortEnableAndConvert>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	ec e7       	ldi	r30, 0x7C	; 124
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	99 81       	ldd	r25, Y+1	; 0x01
 1c4:	20 81       	ld	r18, Z
 1c6:	88 7f       	andi	r24, 0xF8	; 248
 1c8:	97 70       	andi	r25, 0x07	; 7
 1ca:	89 2b       	or	r24, r25
 1cc:	82 2b       	or	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <main>:
 1e2:	94 b7       	in	r25, 0x34	; 52
 1e4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <MCUSR_data>
 1e8:	89 2b       	or	r24, r25
 1ea:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <MCUSR_data>
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	84 b9       	out	0x04, r24	; 4
 1f2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 1f6:	a1 df       	rcall	.-190    	; 0x13a <init>
 1f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <leftWheelDistance+0x1>
 1fc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <leftWheelDistance>
 200:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rightWheelDistance+0x1>
 204:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rightWheelDistance>
 208:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <reflex1Counter+0x1>
 20c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <reflex1Counter>
 210:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <reflex2Counter+0x1>
 214:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <reflex2Counter>
 218:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 21c:	81 11       	cpse	r24, r1
 21e:	03 c0       	rjmp	.+6      	; 0x226 <main+0x44>
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	c6 df       	rcall	.-116    	; 0x1b0 <adcPortEnableAndConvert>
 224:	06 c0       	rjmp	.+12     	; 0x232 <main+0x50>
 226:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	11 f4       	brne	.+4      	; 0x232 <main+0x50>
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	bf df       	rcall	.-130    	; 0x1b0 <adcPortEnableAndConvert>
 232:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <rightWheelDistance>
 236:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <rightWheelDistance+0x1>
 23a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <leftWheelDistance>
 23e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <leftWheelDistance+0x1>
 242:	91 df       	rcall	.-222    	; 0x166 <packData>
 244:	e9 cf       	rjmp	.-46     	; 0x218 <main+0x36>

00000246 <__vector_24>:
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	0b b6       	in	r0, 0x3b	; 59
 252:	0f 92       	push	r0
 254:	2f 93       	push	r18
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <__vector_24+0x1e>
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	1a 82       	std	Y+2, r1	; 0x02
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 270:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8f 7b       	andi	r24, 0xBF	; 191
 280:	80 83       	st	Z, r24
 282:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 286:	81 11       	cpse	r24, r1
 288:	32 c0       	rjmp	.+100    	; 0x2ee <__vector_24+0xa8>
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9a 81       	ldd	r25, Y+2	; 0x02
 28e:	85 3f       	cpi	r24, 0xF5	; 245
 290:	91 40       	sbci	r25, 0x01	; 1
 292:	a8 f0       	brcs	.+42     	; 0x2be <__vector_24+0x78>
 294:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <lastADCReflex1>
 298:	88 23       	and	r24, r24
 29a:	21 f0       	breq	.+8      	; 0x2a4 <__vector_24+0x5e>
 29c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <lastADCReflex1>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	69 f4       	brne	.+26     	; 0x2be <__vector_24+0x78>
 2a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <reflex1Counter>
 2a8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <reflex1Counter+0x1>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <reflex1Counter+0x1>
 2b2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <reflex1Counter>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <lastADCReflex1>
 2bc:	18 c0       	rjmp	.+48     	; 0x2ee <__vector_24+0xa8>
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	83 33       	cpi	r24, 0x33	; 51
 2c4:	91 40       	sbci	r25, 0x01	; 1
 2c6:	98 f4       	brcc	.+38     	; 0x2ee <__vector_24+0xa8>
 2c8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <lastADCReflex1>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <__vector_24+0x92>
 2d0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <lastADCReflex1>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	59 f4       	brne	.+22     	; 0x2ee <__vector_24+0xa8>
 2d8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <reflex1Counter>
 2dc:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <reflex1Counter+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <reflex1Counter+0x1>
 2e6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <reflex1Counter>
 2ea:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <lastADCReflex1>
 2ee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 f5       	brne	.+100    	; 0x35a <__vector_24+0x114>
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	85 3f       	cpi	r24, 0xF5	; 245
 2fc:	91 40       	sbci	r25, 0x01	; 1
 2fe:	a8 f0       	brcs	.+42     	; 0x32a <__vector_24+0xe4>
 300:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <lastADCReflex2>
 304:	88 23       	and	r24, r24
 306:	21 f0       	breq	.+8      	; 0x310 <__vector_24+0xca>
 308:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <lastADCReflex2>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	69 f4       	brne	.+26     	; 0x32a <__vector_24+0xe4>
 310:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <reflex2Counter>
 314:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <reflex2Counter+0x1>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <reflex2Counter+0x1>
 31e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <reflex2Counter>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <lastADCReflex2>
 328:	18 c0       	rjmp	.+48     	; 0x35a <__vector_24+0x114>
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	83 33       	cpi	r24, 0x33	; 51
 330:	91 40       	sbci	r25, 0x01	; 1
 332:	98 f4       	brcc	.+38     	; 0x35a <__vector_24+0x114>
 334:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <lastADCReflex2>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	21 f0       	breq	.+8      	; 0x344 <__vector_24+0xfe>
 33c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <lastADCReflex2>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	59 f4       	brne	.+22     	; 0x35a <__vector_24+0x114>
 344:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <reflex2Counter>
 348:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <reflex2Counter+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <reflex2Counter+0x1>
 352:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <reflex2Counter>
 356:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <lastADCReflex2>
 35a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	19 f4       	brne	.+6      	; 0x368 <__vector_24+0x122>
 362:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 366:	05 c0       	rjmp	.+10     	; 0x372 <__vector_24+0x12c>
 368:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0b be       	out	0x3b, r0	; 59
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <reset_distance_buff>:
 392:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <reflex1Counter+0x1>
 396:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <reflex1Counter>
 39a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <reflex2Counter+0x1>
 39e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <reflex2Counter>
 3a2:	08 95       	ret

000003a4 <__vector_13>:
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	0b b6       	in	r0, 0x3b	; 59
 3b0:	0f 92       	push	r0
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
 3d2:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <reflex1Counter>
 3d6:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <reflex1Counter+0x1>
 3da:	00 91 30 01 	lds	r16, 0x0130	; 0x800130 <reflex2Counter>
 3de:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <reflex2Counter+0x1>
 3e2:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <leftWheelDistance>
 3e6:	d0 91 28 01 	lds	r29, 0x0128	; 0x800128 <leftWheelDistance+0x1>
 3ea:	ad ec       	ldi	r26, 0xCD	; 205
 3ec:	bc ec       	ldi	r27, 0xCC	; 204
 3ee:	d5 d2       	rcall	.+1450   	; 0x99a <__umulhisi3>
 3f0:	92 95       	swap	r25
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	89 27       	eor	r24, r25
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	89 27       	eor	r24, r25
 3fc:	bc 01       	movw	r22, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	da d1       	rcall	.+948    	; 0x7b8 <__floatunsisf>
 404:	25 e2       	ldi	r18, 0x25	; 37
 406:	36 e0       	ldi	r19, 0x06	; 6
 408:	49 e4       	ldi	r20, 0x49	; 73
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	3b d2       	rcall	.+1142   	; 0x884 <__mulsf3>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	48 e7       	ldi	r20, 0x78	; 120
 414:	52 e4       	ldi	r21, 0x42	; 66
 416:	36 d2       	rcall	.+1132   	; 0x884 <__mulsf3>
 418:	a3 d1       	rcall	.+838    	; 0x760 <__fixunssfsi>
 41a:	6c 0f       	add	r22, r28
 41c:	7d 1f       	adc	r23, r29
 41e:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <leftWheelDistance+0x1>
 422:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <leftWheelDistance>
 426:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <rightWheelDistance>
 42a:	d0 91 36 01 	lds	r29, 0x0136	; 0x800136 <rightWheelDistance+0x1>
 42e:	98 01       	movw	r18, r16
 430:	ad ec       	ldi	r26, 0xCD	; 205
 432:	bc ec       	ldi	r27, 0xCC	; 204
 434:	b2 d2       	rcall	.+1380   	; 0x99a <__umulhisi3>
 436:	92 95       	swap	r25
 438:	82 95       	swap	r24
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	89 27       	eor	r24, r25
 43e:	9f 70       	andi	r25, 0x0F	; 15
 440:	89 27       	eor	r24, r25
 442:	bc 01       	movw	r22, r24
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	b7 d1       	rcall	.+878    	; 0x7b8 <__floatunsisf>
 44a:	25 e2       	ldi	r18, 0x25	; 37
 44c:	36 e0       	ldi	r19, 0x06	; 6
 44e:	49 e4       	ldi	r20, 0x49	; 73
 450:	50 e4       	ldi	r21, 0x40	; 64
 452:	18 d2       	rcall	.+1072   	; 0x884 <__mulsf3>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	48 e7       	ldi	r20, 0x78	; 120
 45a:	52 e4       	ldi	r21, 0x42	; 66
 45c:	13 d2       	rcall	.+1062   	; 0x884 <__mulsf3>
 45e:	80 d1       	rcall	.+768    	; 0x760 <__fixunssfsi>
 460:	6c 0f       	add	r22, r28
 462:	7d 1f       	adc	r23, r29
 464:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <rightWheelDistance+0x1>
 468:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <rightWheelDistance>
 46c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 470:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	0f 90       	pop	r0
 496:	0b be       	out	0x3b, r0	; 59
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <init_Sensor_Slave>:
>>>>>>> aeac1229ae6da073764343ba8832d38d8c4a659c
	}
	

	// Reset the sensor data buffer
	for (uint8_t i = 0; i < BUFFER_SIZE; ++i) {
		sensor_data_buffer[i] = 0;
 204:	85 e4       	ldi	r24, 0x45	; 69
 206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 20a:	8a e6       	ldi	r24, 0x6A	; 106
 20c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 210:	08 95       	ret

00000212 <receive_Data>:
 212:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <received_index>
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 21c:	e1 5c       	subi	r30, 0xC1	; 193
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	80 83       	st	Z, r24
 222:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <received_index>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <received_index>
 22c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <received_index>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	20 f4       	brcc	.+8      	; 0x23c <receive_Data+0x2a>
 234:	85 ec       	ldi	r24, 0xC5	; 197
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 23a:	08 95       	ret
 23c:	85 e8       	ldi	r24, 0x85	; 133
 23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 242:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <received_index>
 246:	08 95       	ret

00000248 <__vector_26>:
	}
}


ISR(TWI_vect) {
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	0b b6       	in	r0, 0x3b	; 59
 254:	0f 92       	push	r0
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	//TWI status flags
	switch (TW_STATUS) {
 26e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	80 39       	cpi	r24, 0x90	; 144
 276:	09 f4       	brne	.+2      	; 0x27a <__vector_26+0x32>
 278:	e7 c0       	rjmp	.+462    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 27a:	b8 f4       	brcc	.+46     	; 0x2aa <__vector_26+0x62>
 27c:	80 37       	cpi	r24, 0x70	; 112
 27e:	09 f4       	brne	.+2      	; 0x282 <__vector_26+0x3a>
 280:	b3 c0       	rjmp	.+358    	; 0x3e8 <__vector_26+0x1a0>
 282:	48 f4       	brcc	.+18     	; 0x296 <__vector_26+0x4e>
 284:	80 36       	cpi	r24, 0x60	; 96
 286:	09 f4       	brne	.+2      	; 0x28a <__vector_26+0x42>
 288:	a3 c0       	rjmp	.+326    	; 0x3d0 <__vector_26+0x188>
 28a:	88 36       	cpi	r24, 0x68	; 104
 28c:	09 f4       	brne	.+2      	; 0x290 <__vector_26+0x48>
 28e:	a6 c0       	rjmp	.+332    	; 0x3dc <__vector_26+0x194>
 290:	81 11       	cpse	r24, r1
 292:	fc c0       	rjmp	.+504    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 294:	ed c0       	rjmp	.+474    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 296:	80 38       	cpi	r24, 0x80	; 128
 298:	09 f4       	brne	.+2      	; 0x29c <__vector_26+0x54>
 29a:	b2 c0       	rjmp	.+356    	; 0x400 <__LOCK_REGION_LENGTH__>
 29c:	88 38       	cpi	r24, 0x88	; 136
 29e:	09 f4       	brne	.+2      	; 0x2a2 <__vector_26+0x5a>
 2a0:	cc c0       	rjmp	.+408    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 2a2:	88 37       	cpi	r24, 0x78	; 120
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <__vector_26+0x60>
 2a6:	f2 c0       	rjmp	.+484    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 2a8:	a5 c0       	rjmp	.+330    	; 0x3f4 <__vector_26+0x1ac>
 2aa:	80 3b       	cpi	r24, 0xB0	; 176
 2ac:	d9 f1       	breq	.+118    	; 0x324 <__vector_26+0xdc>
 2ae:	48 f4       	brcc	.+18     	; 0x2c2 <__vector_26+0x7a>
 2b0:	80 3a       	cpi	r24, 0xA0	; 160
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <__vector_26+0x6e>
 2b4:	e3 c0       	rjmp	.+454    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 2b6:	88 3a       	cpi	r24, 0xA8	; 168
 2b8:	99 f0       	breq	.+38     	; 0x2e0 <__vector_26+0x98>
 2ba:	88 39       	cpi	r24, 0x98	; 152
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_26+0x78>
 2be:	e6 c0       	rjmp	.+460    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 2c0:	ca c0       	rjmp	.+404    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 2c2:	80 3c       	cpi	r24, 0xC0	; 192
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <__vector_26+0x80>
 2c6:	78 c0       	rjmp	.+240    	; 0x3b8 <__vector_26+0x170>
 2c8:	20 f4       	brcc	.+8      	; 0x2d2 <__vector_26+0x8a>
 2ca:	88 3b       	cpi	r24, 0xB8	; 184
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <__vector_26+0x88>
 2ce:	4d c0       	rjmp	.+154    	; 0x36a <__vector_26+0x122>
 2d0:	dd c0       	rjmp	.+442    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 2d2:	88 3c       	cpi	r24, 0xC8	; 200
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <__vector_26+0x90>
 2d6:	76 c0       	rjmp	.+236    	; 0x3c4 <__vector_26+0x17c>
 2d8:	88 3f       	cpi	r24, 0xF8	; 248
 2da:	09 f4       	brne	.+2      	; 0x2de <__vector_26+0x96>
 2dc:	c3 c0       	rjmp	.+390    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 2de:	d6 c0       	rjmp	.+428    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		//Case TWI slave transfer slave_address (0xA8)
		case TW_ST_SLA_ACK:
			if (sensor_index == BUFFER_SIZE - 1) {
 2e0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sensor_index>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	89 f4       	brne	.+34     	; 0x30a <__vector_26+0xc2>
				TWDR = sensor_data_buffer[sensor_index];
 2e8:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ef 5c       	subi	r30, 0xCF	; 207
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	80 81       	ld	r24, Z
 2f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				sensor_index = 0;
 2f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <sensor_index>
				reset_distance_buff();
 2fc:	7e df       	rcall	.-260    	; 0x1fa <reset_distance_buff>
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2fe:	85 e8       	ldi	r24, 0x85	; 133
 300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	85 b9       	out	0x05, r24	; 5
 308:	0d c0       	rjmp	.+26     	; 0x324 <__vector_26+0xdc>
				
			}
			else {
				TWDR = sensor_data_buffer[sensor_index];
 30a:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ef 5c       	subi	r30, 0xCF	; 207
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				//sensor_index++;
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 31a:	85 ec       	ldi	r24, 0xC5	; 197
 31c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 2;
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	85 b9       	out	0x05, r24	; 5
			}

		
		//Case (0xB0) Arbitration lost in Slave Transmit, SLA received with ACK
		case TW_ST_ARB_LOST_SLA_ACK:
			if (sensor_index == BUFFER_SIZE - 1) {
 324:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sensor_index>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	89 f4       	brne	.+34     	; 0x34e <__vector_26+0x106>
				TWDR = sensor_data_buffer[sensor_index];
 32c:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ef 5c       	subi	r30, 0xCF	; 207
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	80 81       	ld	r24, Z
 338:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				sensor_index = 0;
 33c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <sensor_index>
				reset_distance_buff();
 340:	5c df       	rcall	.-328    	; 0x1fa <reset_distance_buff>
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 342:	85 e8       	ldi	r24, 0x85	; 133
 344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 3;
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	a1 c0       	rjmp	.+322    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				;
				} 
			else {
				TWDR = sensor_data_buffer[sensor_index];
 34e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	ef 5c       	subi	r30, 0xCF	; 207
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	80 81       	ld	r24, Z
 35a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				//sensor_index++;
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 35e:	85 ec       	ldi	r24, 0xC5	; 197
 360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 4;
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	85 b9       	out	0x05, r24	; 5
 368:	93 c0       	rjmp	.+294    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}
		break;
		
		//Case (0xB8) TWI slave transfer data, data has been transmitted and an ACK (acknowledgment) has been received.
		case TW_ST_DATA_ACK:
			if (sensor_index == BUFFER_SIZE - 1) {
 36a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sensor_index>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	89 f4       	brne	.+34     	; 0x394 <__vector_26+0x14c>
				TWDR = sensor_data_buffer[sensor_index];
 372:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ef 5c       	subi	r30, 0xCF	; 207
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 81       	ld	r24, Z
 37e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				sensor_index = 0;
 382:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <sensor_index>
				reset_distance_buff();
 386:	39 df       	rcall	.-398    	; 0x1fa <reset_distance_buff>
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 388:	85 e8       	ldi	r24, 0x85	; 133
 38a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 5;
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	85 b9       	out	0x05, r24	; 5
 392:	12 c0       	rjmp	.+36     	; 0x3b8 <__vector_26+0x170>
				
			}
			else {
				TWDR = sensor_data_buffer[sensor_index];
 394:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <sensor_index>
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ef 5c       	subi	r30, 0xCF	; 207
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 81       	ld	r24, Z
 3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				sensor_index++;
 3a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sensor_index>
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <sensor_index>
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3ae:	85 ec       	ldi	r24, 0xC5	; 197
 3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 6;
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	85 b9       	out	0x05, r24	; 5
			
			}
		//case (0xC0)TWI slave transfer data, data has been transmitted, but a NACK (non-acknowledgment) was received.
		case TW_ST_DATA_NACK:
			// Release the TWI peripheral to be ready for a new start condition
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3b8:	85 ec       	ldi	r24, 0xC5	; 197
 3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 7;
 3be:	87 e0       	ldi	r24, 0x07	; 7
 3c0:	85 b9       	out	0x05, r24	; 5
			
			break;
 3c2:	66 c0       	rjmp	.+204    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		//case 0xC8
		case TW_ST_LAST_DATA:
			
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
 3c4:	85 ec       	ldi	r24, 0xC5	; 197
 3c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 8;
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	85 b9       	out	0x05, r24	; 5
			break;
 3ce:	60 c0       	rjmp	.+192    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

		//case 0x60 TWI slave receiver slave_address
		case TW_SR_SLA_ACK:
			// Set TWI status to receive mode with acknowledgment (ACK)
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3d0:	85 ec       	ldi	r24, 0xC5	; 197
 3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 9;
 3d6:	89 e0       	ldi	r24, 0x09	; 9
 3d8:	85 b9       	out	0x05, r24	; 5
			break;
 3da:	5a c0       	rjmp	.+180    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

		//Case 0x68
		case TW_SR_ARB_LOST_SLA_ACK:
			 // Release the TWI peripheral to be ready for a new start condition
			 TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3dc:	85 ec       	ldi	r24, 0xC5	; 197
 3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			 PORTB = 10;
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	85 b9       	out	0x05, r24	; 5
		break;
 3e6:	54 c0       	rjmp	.+168    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		//case 0x70
		case TW_SR_GCALL_ACK:
			 // Set TWI status to receive mode with acknowledgment
			 TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3e8:	85 ec       	ldi	r24, 0xC5	; 197
 3ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			 PORTB = 11;
 3ee:	8b e0       	ldi	r24, 0x0B	; 11
 3f0:	85 b9       	out	0x05, r24	; 5
		break;
 3f2:	4e c0       	rjmp	.+156    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		//case 0x78
		case TW_SR_ARB_LOST_GCALL_ACK:
			// Release the TWI peripheral to be ready for a new start condition
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3f4:	85 ec       	ldi	r24, 0xC5	; 197
 3f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 12;
 3fa:	8c e0       	ldi	r24, 0x0C	; 12
 3fc:	85 b9       	out	0x05, r24	; 5
		break;
 3fe:	48 c0       	rjmp	.+144    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
		//case 0x80
		case TW_SR_DATA_ACK:
			// Read received data and send ACK for the next byte
			received_data_buffer[received_index] = TWDR;
 400:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <received_index>
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 40a:	e1 5c       	subi	r30, 0xC1	; 193
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	80 83       	st	Z, r24

			// Increment the index for the next received byte
			received_index = (received_index + 1);
 410:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <received_index>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <received_index>

			if (received_index < (BUFFER_SIZE)) {
 41a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <received_index>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	30 f4       	brcc	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 422:	85 ec       	ldi	r24, 0xC5	; 197
 424:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 13;
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	85 b9       	out	0x05, r24	; 5
 42c:	31 c0       	rjmp	.+98     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				} 
			else {
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 42e:	85 e8       	ldi	r24, 0x85	; 133
 430:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				PORTB = 14;
 434:	8e e0       	ldi	r24, 0x0E	; 14
 436:	85 b9       	out	0x05, r24	; 5
			break;

		//case 0x88
		case TW_SR_DATA_NACK:
			// Receive data
			receive_Data();
 438:	2b c0       	rjmp	.+86     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 43a:	eb de       	rcall	.-554    	; 0x212 <receive_Data>
			// Set TWI status to ready for a new start condition
			//received_index = 0;
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 43c:	85 ec       	ldi	r24, 0xC5	; 197
 43e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 15;
 442:	8f e0       	ldi	r24, 0x0F	; 15
		
		break;
 444:	85 b9       	out	0x05, r24	; 5
		//case 0x90
		case TW_SR_GCALL_DATA_ACK:
			receive_Data();
 446:	24 c0       	rjmp	.+72     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 448:	e4 de       	rcall	.-568    	; 0x212 <receive_Data>
			PORTB = 16;
 44a:	80 e1       	ldi	r24, 0x10	; 16
			// Set TWI status to ready for a new start condition
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 44c:	85 b9       	out	0x05, r24	; 5
 44e:	85 ec       	ldi	r24, 0xC5	; 197
 450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;

		//case 0x98
		case TW_SR_GCALL_DATA_NACK:
			receive_Data();
 454:	1d c0       	rjmp	.+58     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 456:	dd de       	rcall	.-582    	; 0x212 <receive_Data>
			// Set TWI status to ready for a new start condition
			//received_index = 0;
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 458:	85 ec       	ldi	r24, 0xC5	; 197
 45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 17;
 45e:	81 e1       	ldi	r24, 0x11	; 17
		break;
 460:	85 b9       	out	0x05, r24	; 5
		//case 0xF8
		case TW_NO_INFO:
			 printf("TWI slave device did not respond\n");
 462:	16 c0       	rjmp	.+44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	2b d0       	rcall	.+86     	; 0x4c0 <puts>
			 PORTB = 18;
 46a:	82 e1       	ldi	r24, 0x12	; 18
 46c:	85 b9       	out	0x05, r24	; 5
		break;
 46e:	10 c0       	rjmp	.+32     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		//case 0x00
		case TW_BUS_ERROR:
			// Release the internal hardware and clear TWSTO
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 470:	85 ec       	ldi	r24, 0xC5	; 197
 472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			PORTB = 19;
 476:	83 e1       	ldi	r24, 0x13	; 19
 478:	85 b9       	out	0x05, r24	; 5
		break;
 47a:	0a c0       	rjmp	.+20     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
		//In the case where a STOP condition or repeated START condition has been received while still addressed as a slave
		case TW_SR_STOP:
			PORTB = 20;
 47c:	84 e1       	ldi	r24, 0x14	; 20
 47e:	85 b9       	out	0x05, r24	; 5
			// Set TWI status to ready for a new start condition
			received_index = 0;
 480:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <received_index>
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);	
 484:	85 ec       	ldi	r24, 0xC5	; 197
 486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

		default:
			//reset_distance_buff();
			PORTB = 21;
 48c:	85 e1       	ldi	r24, 0x15	; 21
 48e:	85 b9       	out	0x05, r24	; 5
		
		break;
	}

	// Clear the TWI interrupt flag
	TWCR |= (1 << TWINT);
 490:	ec eb       	ldi	r30, 0xBC	; 188
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	80 68       	ori	r24, 0x80	; 128
 498:	80 83       	st	Z, r24
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0b be       	out	0x3b, r0	; 59
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <puts>:
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__iob+0x2>
 4cc:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__iob+0x3>
 4d0:	23 81       	ldd	r18, Z+3	; 0x03
 4d2:	21 ff       	sbrs	r18, 1
 4d4:	1b c0       	rjmp	.+54     	; 0x50c <puts+0x4c>
 4d6:	8c 01       	movw	r16, r24
 4d8:	d0 e0       	ldi	r29, 0x00	; 0
 4da:	c0 e0       	ldi	r28, 0x00	; 0
 4dc:	f8 01       	movw	r30, r16
 4de:	81 91       	ld	r24, Z+
 4e0:	8f 01       	movw	r16, r30
 4e2:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <__iob+0x2>
 4e6:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <__iob+0x3>
 4ea:	db 01       	movw	r26, r22
 4ec:	18 96       	adiw	r26, 0x08	; 8
 4ee:	ed 91       	ld	r30, X+
 4f0:	fc 91       	ld	r31, X
 4f2:	19 97       	sbiw	r26, 0x09	; 9
 4f4:	88 23       	and	r24, r24
 4f6:	31 f0       	breq	.+12     	; 0x504 <puts+0x44>
 4f8:	09 95       	icall
 4fa:	89 2b       	or	r24, r25
 4fc:	79 f3       	breq	.-34     	; 0x4dc <puts+0x1c>
 4fe:	df ef       	ldi	r29, 0xFF	; 255
 500:	cf ef       	ldi	r28, 0xFF	; 255
 502:	ec cf       	rjmp	.-40     	; 0x4dc <puts+0x1c>
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	09 95       	icall
 508:	89 2b       	or	r24, r25
 50a:	19 f0       	breq	.+6      	; 0x512 <puts+0x52>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	02 c0       	rjmp	.+4      	; 0x516 <puts+0x56>
 512:	8d 2f       	mov	r24, r29
 514:	9c 2f       	mov	r25, r28
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
