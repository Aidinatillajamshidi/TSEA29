
i2c_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000089c  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800112  00800112  00000942  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000931  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f6  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010c  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	52 c0       	rjmp	.+164    	; 0x10e <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 35       	cpi	r26, 0x5A	; 90
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	28 d1       	rcall	.+592    	; 0x314 <main>
  c4:	e9 c3       	rjmp	.+2002   	; 0x898 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_Sensor_Slave>:
		sensor_index++;

		// Check if we have reached the end of the buffer
		if (sensor_index == BUFFER_SIZE) {
			// Reset the index to start from the beginning of the buffer
			sensor_index = 0;
  c8:	85 ec       	ldi	r24, 0xC5	; 197
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <receive_Data>:
	}
}

void receive_Data() {
	// Receive data and store it in the buffer using received_index
	received_data_buffer[received_index] = TWDR;
  d8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e2:	ec 5c       	subi	r30, 0xCC	; 204
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 83       	st	Z, r24
	// Increment the received_index for the next received byte
	received_index++;
  e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

	// Check if we have reached the end of the buffer
	if (received_index < BUFFER_SIZE) {
  f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  f6:	80 32       	cpi	r24, 0x20	; 32
  f8:	20 f4       	brcc	.+8      	; 0x102 <receive_Data+0x2a>
		// If it's not the last byte, send ACK and clear TWINT to start the data transmission
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  fa:	85 ec       	ldi	r24, 0xC5	; 197
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 100:	08 95       	ret
		} 
	else {
		// If it's the last byte, prepare to send NACK and clear TWINT
		TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 102:	85 e8       	ldi	r24, 0x85	; 133
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		// Reset the index to start from the beginning of the buffer
		received_index = 0;
 108:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 10c:	08 95       	ret

0000010e <__vector_26>:
	}
}



ISR(TWI_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0b b6       	in	r0, 0x3b	; 59
 11a:	0f 92       	push	r0
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	//TWI status flags
	switch (TW_STATUS) {
 134:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	80 39       	cpi	r24, 0x90	; 144
 13c:	09 f4       	brne	.+2      	; 0x140 <__vector_26+0x32>
 13e:	bf c0       	rjmp	.+382    	; 0x2be <__vector_26+0x1b0>
 140:	b8 f4       	brcc	.+46     	; 0x170 <__vector_26+0x62>
 142:	80 37       	cpi	r24, 0x70	; 112
 144:	09 f4       	brne	.+2      	; 0x148 <__vector_26+0x3a>
 146:	ce c0       	rjmp	.+412    	; 0x2e4 <__vector_26+0x1d6>
 148:	48 f4       	brcc	.+18     	; 0x15c <__vector_26+0x4e>
 14a:	80 36       	cpi	r24, 0x60	; 96
 14c:	09 f4       	brne	.+2      	; 0x150 <__vector_26+0x42>
 14e:	91 c0       	rjmp	.+290    	; 0x272 <__vector_26+0x164>
 150:	88 36       	cpi	r24, 0x68	; 104
 152:	09 f4       	brne	.+2      	; 0x156 <__vector_26+0x48>
 154:	92 c0       	rjmp	.+292    	; 0x27a <__vector_26+0x16c>
 156:	81 11       	cpse	r24, r1
 158:	c4 c0       	rjmp	.+392    	; 0x2e2 <__vector_26+0x1d4>
 15a:	bb c0       	rjmp	.+374    	; 0x2d2 <__vector_26+0x1c4>
 15c:	80 38       	cpi	r24, 0x80	; 128
 15e:	09 f4       	brne	.+2      	; 0x162 <__vector_26+0x54>
 160:	90 c0       	rjmp	.+288    	; 0x282 <__vector_26+0x174>
 162:	88 38       	cpi	r24, 0x88	; 136
 164:	09 f4       	brne	.+2      	; 0x168 <__vector_26+0x5a>
 166:	a6 c0       	rjmp	.+332    	; 0x2b4 <__vector_26+0x1a6>
 168:	88 37       	cpi	r24, 0x78	; 120
 16a:	09 f0       	breq	.+2      	; 0x16e <__vector_26+0x60>
 16c:	ba c0       	rjmp	.+372    	; 0x2e2 <__vector_26+0x1d4>
 16e:	ba c0       	rjmp	.+372    	; 0x2e4 <__vector_26+0x1d6>
 170:	80 3b       	cpi	r24, 0xB0	; 176
 172:	09 f4       	brne	.+2      	; 0x176 <__vector_26+0x68>
 174:	3f c0       	rjmp	.+126    	; 0x1f4 <__vector_26+0xe6>
 176:	48 f4       	brcc	.+18     	; 0x18a <__vector_26+0x7c>
 178:	80 3a       	cpi	r24, 0xA0	; 160
 17a:	09 f4       	brne	.+2      	; 0x17e <__vector_26+0x70>
 17c:	ae c0       	rjmp	.+348    	; 0x2da <__vector_26+0x1cc>
 17e:	88 3a       	cpi	r24, 0xA8	; 168
 180:	99 f0       	breq	.+38     	; 0x1a8 <__vector_26+0x9a>
 182:	88 39       	cpi	r24, 0x98	; 152
 184:	09 f0       	breq	.+2      	; 0x188 <__vector_26+0x7a>
 186:	ad c0       	rjmp	.+346    	; 0x2e2 <__vector_26+0x1d4>
 188:	9f c0       	rjmp	.+318    	; 0x2c8 <__vector_26+0x1ba>
 18a:	80 3c       	cpi	r24, 0xC0	; 192
 18c:	09 f4       	brne	.+2      	; 0x190 <__vector_26+0x82>
 18e:	69 c0       	rjmp	.+210    	; 0x262 <__vector_26+0x154>
 190:	20 f4       	brcc	.+8      	; 0x19a <__vector_26+0x8c>
 192:	88 3b       	cpi	r24, 0xB8	; 184
 194:	09 f4       	brne	.+2      	; 0x198 <__vector_26+0x8a>
 196:	4a c0       	rjmp	.+148    	; 0x22c <__vector_26+0x11e>
 198:	a4 c0       	rjmp	.+328    	; 0x2e2 <__vector_26+0x1d4>
 19a:	88 3c       	cpi	r24, 0xC8	; 200
 19c:	09 f4       	brne	.+2      	; 0x1a0 <__vector_26+0x92>
 19e:	65 c0       	rjmp	.+202    	; 0x26a <__vector_26+0x15c>
 1a0:	88 3f       	cpi	r24, 0xF8	; 248
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <__vector_26+0x98>
 1a4:	9f c0       	rjmp	.+318    	; 0x2e4 <__vector_26+0x1d6>
 1a6:	9d c0       	rjmp	.+314    	; 0x2e2 <__vector_26+0x1d4>
		//Case TWI slave transfer slave_address (0xA8)
		case TW_ST_SLA_ACK:
		// Load the data to be sent
		TWDR = sensor_data_buffer[sensor_index];
 1a8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sensor_index>
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ec 5e       	subi	r30, 0xEC	; 236
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	80 81       	ld	r24, Z
 1b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		// Print received SLA for debugging
		printf("Received SLA: %x\n", TWAR >> 1);
 1b8:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 1bc:	86 95       	lsr	r24
 1be:	1f 92       	push	r1
 1c0:	8f 93       	push	r24
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	9f 93       	push	r25
 1c8:	8f 93       	push	r24
 1ca:	a6 d0       	rcall	.+332    	; 0x318 <printf>
		// ...
		//checking if the sensor_index reached to BUFFER_SIZE
		if(sensor_index == BUFFER_SIZE){
 1cc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor_index>
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	80 32       	cpi	r24, 0x20	; 32
 1da:	19 f4       	brne	.+6      	; 0x1e2 <__vector_26+0xd4>
			sensor_index = 0;
 1dc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sensor_index>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <__vector_26+0xde>
		}
		else
		// Increment the index for the next byte
		sensor_index++;
 1e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor_index>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sensor_index>
		// Set TWI status to transmit mode
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1ec:	85 ec       	ldi	r24, 0xC5	; 197
 1ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 1f2:	78 c0       	rjmp	.+240    	; 0x2e4 <__vector_26+0x1d6>
		
		//Case (0xB0) Arbitration lost in Slave Transmit, SLA received with ACK
		case TW_ST_ARB_LOST_SLA_ACK:
			if (sensor_index == BUFFER_SIZE - 1) {
 1f4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor_index>
 1f8:	8f 31       	cpi	r24, 0x1F	; 31
 1fa:	61 f4       	brne	.+24     	; 0x214 <__vector_26+0x106>
				TWDR = sensor_data_buffer[sensor_index];
 1fc:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sensor_index>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ec 5e       	subi	r30, 0xEC	; 236
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
 208:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 20c:	85 e8       	ldi	r24, 0x85	; 133
 20e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 212:	68 c0       	rjmp	.+208    	; 0x2e4 <__vector_26+0x1d6>
				} 
			else {
				TWDR = sensor_data_buffer[sensor_index];
 214:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sensor_index>
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ec 5e       	subi	r30, 0xEC	; 236
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
 21e:	80 81       	ld	r24, Z
 220:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 224:	85 ec       	ldi	r24, 0xC5	; 197
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 22a:	5c c0       	rjmp	.+184    	; 0x2e4 <__vector_26+0x1d6>
			}
		break;
		
		//Case (0xB8) TWI slave transfer data
		case TW_ST_DATA_ACK:
			if (sensor_index == BUFFER_SIZE - 1) {
 22c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor_index>
 230:	8f 31       	cpi	r24, 0x1F	; 31
 232:	61 f4       	brne	.+24     	; 0x24c <__vector_26+0x13e>
				TWDR = sensor_data_buffer[sensor_index];
 234:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sensor_index>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ec 5e       	subi	r30, 0xEC	; 236
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				// If it's the last byte, prepare to send NACK
				TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 244:	85 e8       	ldi	r24, 0x85	; 133
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24a:	0b c0       	rjmp	.+22     	; 0x262 <__vector_26+0x154>
			}
			else {
				TWDR = sensor_data_buffer[sensor_index];
 24c:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sensor_index>
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 5e       	subi	r30, 0xEC	; 236
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				// If it's not the last byte, send ACK
				TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 25c:	85 ec       	ldi	r24, 0xC5	; 197
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
		//case (0xC0)
		case TW_ST_DATA_NACK:
			// Release the TWI peripheral to be ready for a new start condition
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 262:	85 ec       	ldi	r24, 0xC5	; 197
 264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			break;
 268:	3d c0       	rjmp	.+122    	; 0x2e4 <__vector_26+0x1d6>
		//case 0xC8
		case TW_ST_LAST_DATA:
			
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
 26a:	85 ec       	ldi	r24, 0xC5	; 197
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 270:	39 c0       	rjmp	.+114    	; 0x2e4 <__vector_26+0x1d6>

		//case 0x60 TWI slave receiver slave_address
		case TW_SR_SLA_ACK:
			// Set TWI status to receive mode with acknowledgment (ACK)
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 272:	85 ec       	ldi	r24, 0xC5	; 197
 274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 278:	35 c0       	rjmp	.+106    	; 0x2e4 <__vector_26+0x1d6>

		//Case 0x68
		case TW_SR_ARB_LOST_SLA_ACK:
			 // Release the TWI peripheral to be ready for a new start condition
			 TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 27a:	85 ec       	ldi	r24, 0xC5	; 197
 27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 280:	31 c0       	rjmp	.+98     	; 0x2e4 <__vector_26+0x1d6>
		break;
		
		//case 0x80
		case TW_SR_DATA_ACK:
		// Read received data and send ACK for the next byte
		received_data_buffer[received_index] = TWDR;
 282:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 28c:	ec 5c       	subi	r30, 0xCC	; 204
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	80 83       	st	Z, r24

		// Increment the index for the next received byte
		received_index++;
 292:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

		if (received_index < (BUFFER_SIZE - 1)) {
 29c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2a0:	8f 31       	cpi	r24, 0x1F	; 31
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <__vector_26+0x19e>
			// If it's not the last byte, send ACK
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2a4:	85 ec       	ldi	r24, 0xC5	; 197
 2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2aa:	1c c0       	rjmp	.+56     	; 0x2e4 <__vector_26+0x1d6>
			} 
		else {
			// If it's the last byte, prepare to send NACK
			TWCR = (1 << TWINT) | (0 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2ac:	85 e8       	ldi	r24, 0x85	; 133
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;

		//case 0x88
		case TW_SR_DATA_NACK:
		// Receive data
		receive_Data();
 2b2:	18 c0       	rjmp	.+48     	; 0x2e4 <__vector_26+0x1d6>
 2b4:	11 df       	rcall	.-478    	; 0xd8 <receive_Data>
		// Set TWI status to ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2b6:	85 ec       	ldi	r24, 0xC5	; 197
 2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
		//case 0x90
		case TW_SR_GCALL_DATA_ACK:
		receive_Data();
 2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <__vector_26+0x1d6>
 2be:	0c df       	rcall	.-488    	; 0xd8 <receive_Data>
		// Set TWI status to ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2c0:	85 ec       	ldi	r24, 0xC5	; 197
 2c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;

		//case 0x98
		case TW_SR_GCALL_DATA_NACK:
		receive_Data();
 2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <__vector_26+0x1d6>
 2c8:	07 df       	rcall	.-498    	; 0xd8 <receive_Data>
		// Set TWI status to ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2ca:	85 ec       	ldi	r24, 0xC5	; 197
 2cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <__vector_26+0x1d6>

		break;
		//case 0x00
		case TW_BUS_ERROR:
		// Release the internal hardware and clear TWSTO
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2d2:	85 ec       	ldi	r24, 0xC5	; 197
 2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <__vector_26+0x1d6>
		//In the case where a STOP condition or repeated START condition has been received while still addressed as a slave
		case TW_SR_STOP:
		// Set TWI status to ready for a new start condition
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2da:	85 ec       	ldi	r24, 0xC5	; 197
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;

		default:
			init_Sensor_Slave();
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <__vector_26+0x1d6>
 2e2:	f2 de       	rcall	.-540    	; 0xc8 <init_Sensor_Slave>
		
		break;
	}

	// Clear the TWI interrupt flag
	TWCR |= (1 << TWINT);
 2e4:	ec eb       	ldi	r30, 0xBC	; 188
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 83       	st	Z, r24
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <main>:

int main () {
	
	init_Sensor_Slave();
 314:	d9 de       	rcall	.-590    	; 0xc8 <init_Sensor_Slave>
 316:	ff cf       	rjmp	.-2      	; 0x316 <main+0x2>

00000318 <printf>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	ae 01       	movw	r20, r28
 322:	4b 5f       	subi	r20, 0xFB	; 251
 324:	5f 4f       	sbci	r21, 0xFF	; 255
 326:	fa 01       	movw	r30, r20
 328:	61 91       	ld	r22, Z+
 32a:	71 91       	ld	r23, Z+
 32c:	af 01       	movw	r20, r30
 32e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__iob+0x2>
 332:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__iob+0x3>
 336:	03 d0       	rcall	.+6      	; 0x33e <vfprintf>
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <vfprintf>:
 33e:	2f 92       	push	r2
 340:	3f 92       	push	r3
 342:	4f 92       	push	r4
 344:	5f 92       	push	r5
 346:	6f 92       	push	r6
 348:	7f 92       	push	r7
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	2b 97       	sbiw	r28, 0x0b	; 11
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	6c 01       	movw	r12, r24
 374:	7b 01       	movw	r14, r22
 376:	8a 01       	movw	r16, r20
 378:	fc 01       	movw	r30, r24
 37a:	17 82       	std	Z+7, r1	; 0x07
 37c:	16 82       	std	Z+6, r1	; 0x06
 37e:	83 81       	ldd	r24, Z+3	; 0x03
 380:	81 ff       	sbrs	r24, 1
 382:	bf c1       	rjmp	.+894    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	3c 01       	movw	r6, r24
 38a:	f6 01       	movw	r30, r12
 38c:	93 81       	ldd	r25, Z+3	; 0x03
 38e:	f7 01       	movw	r30, r14
 390:	93 fd       	sbrc	r25, 3
 392:	85 91       	lpm	r24, Z+
 394:	93 ff       	sbrs	r25, 3
 396:	81 91       	ld	r24, Z+
 398:	7f 01       	movw	r14, r30
 39a:	88 23       	and	r24, r24
 39c:	09 f4       	brne	.+2      	; 0x3a0 <vfprintf+0x62>
 39e:	ad c1       	rjmp	.+858    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 3a0:	85 32       	cpi	r24, 0x25	; 37
 3a2:	39 f4       	brne	.+14     	; 0x3b2 <vfprintf+0x74>
 3a4:	93 fd       	sbrc	r25, 3
 3a6:	85 91       	lpm	r24, Z+
 3a8:	93 ff       	sbrs	r25, 3
 3aa:	81 91       	ld	r24, Z+
 3ac:	7f 01       	movw	r14, r30
 3ae:	85 32       	cpi	r24, 0x25	; 37
 3b0:	21 f4       	brne	.+8      	; 0x3ba <vfprintf+0x7c>
 3b2:	b6 01       	movw	r22, r12
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	d6 d1       	rcall	.+940    	; 0x764 <fputc>
 3b8:	e8 cf       	rjmp	.-48     	; 0x38a <vfprintf+0x4c>
 3ba:	91 2c       	mov	r9, r1
 3bc:	21 2c       	mov	r2, r1
 3be:	31 2c       	mov	r3, r1
 3c0:	ff e1       	ldi	r31, 0x1F	; 31
 3c2:	f3 15       	cp	r31, r3
 3c4:	d8 f0       	brcs	.+54     	; 0x3fc <vfprintf+0xbe>
 3c6:	8b 32       	cpi	r24, 0x2B	; 43
 3c8:	79 f0       	breq	.+30     	; 0x3e8 <vfprintf+0xaa>
 3ca:	38 f4       	brcc	.+14     	; 0x3da <vfprintf+0x9c>
 3cc:	80 32       	cpi	r24, 0x20	; 32
 3ce:	79 f0       	breq	.+30     	; 0x3ee <vfprintf+0xb0>
 3d0:	83 32       	cpi	r24, 0x23	; 35
 3d2:	a1 f4       	brne	.+40     	; 0x3fc <vfprintf+0xbe>
 3d4:	23 2d       	mov	r18, r3
 3d6:	20 61       	ori	r18, 0x10	; 16
 3d8:	1d c0       	rjmp	.+58     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3da:	8d 32       	cpi	r24, 0x2D	; 45
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <vfprintf+0xb8>
 3de:	80 33       	cpi	r24, 0x30	; 48
 3e0:	69 f4       	brne	.+26     	; 0x3fc <vfprintf+0xbe>
 3e2:	23 2d       	mov	r18, r3
 3e4:	21 60       	ori	r18, 0x01	; 1
 3e6:	16 c0       	rjmp	.+44     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e8:	83 2d       	mov	r24, r3
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	38 2e       	mov	r3, r24
 3ee:	e3 2d       	mov	r30, r3
 3f0:	e4 60       	ori	r30, 0x04	; 4
 3f2:	3e 2e       	mov	r3, r30
 3f4:	2a c0       	rjmp	.+84     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f6:	f3 2d       	mov	r31, r3
 3f8:	f8 60       	ori	r31, 0x08	; 8
 3fa:	1d c0       	rjmp	.+58     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3fc:	37 fc       	sbrc	r3, 7
 3fe:	2d c0       	rjmp	.+90     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 400:	20 ed       	ldi	r18, 0xD0	; 208
 402:	28 0f       	add	r18, r24
 404:	2a 30       	cpi	r18, 0x0A	; 10
 406:	40 f0       	brcs	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 408:	8e 32       	cpi	r24, 0x2E	; 46
 40a:	b9 f4       	brne	.+46     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 40c:	36 fc       	sbrc	r3, 6
 40e:	75 c1       	rjmp	.+746    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 410:	23 2d       	mov	r18, r3
 412:	20 64       	ori	r18, 0x40	; 64
 414:	32 2e       	mov	r3, r18
 416:	19 c0       	rjmp	.+50     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 418:	36 fe       	sbrs	r3, 6
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	98 9e       	mul	r9, r24
 420:	20 0d       	add	r18, r0
 422:	11 24       	eor	r1, r1
 424:	92 2e       	mov	r9, r18
 426:	11 c0       	rjmp	.+34     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 428:	ea e0       	ldi	r30, 0x0A	; 10
 42a:	2e 9e       	mul	r2, r30
 42c:	20 0d       	add	r18, r0
 42e:	11 24       	eor	r1, r1
 430:	22 2e       	mov	r2, r18
 432:	f3 2d       	mov	r31, r3
 434:	f0 62       	ori	r31, 0x20	; 32
 436:	3f 2e       	mov	r3, r31
 438:	08 c0       	rjmp	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43a:	8c 36       	cpi	r24, 0x6C	; 108
 43c:	21 f4       	brne	.+8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43e:	83 2d       	mov	r24, r3
 440:	80 68       	ori	r24, 0x80	; 128
 442:	38 2e       	mov	r3, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 36       	cpi	r24, 0x68	; 104
 448:	41 f4       	brne	.+16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 44a:	f7 01       	movw	r30, r14
 44c:	93 fd       	sbrc	r25, 3
 44e:	85 91       	lpm	r24, Z+
 450:	93 ff       	sbrs	r25, 3
 452:	81 91       	ld	r24, Z+
 454:	7f 01       	movw	r14, r30
 456:	81 11       	cpse	r24, r1
 458:	b3 cf       	rjmp	.-154    	; 0x3c0 <vfprintf+0x82>
 45a:	98 2f       	mov	r25, r24
 45c:	9f 7d       	andi	r25, 0xDF	; 223
 45e:	95 54       	subi	r25, 0x45	; 69
 460:	93 30       	cpi	r25, 0x03	; 3
 462:	28 f4       	brcc	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 464:	0c 5f       	subi	r16, 0xFC	; 252
 466:	1f 4f       	sbci	r17, 0xFF	; 255
 468:	9f e3       	ldi	r25, 0x3F	; 63
 46a:	99 83       	std	Y+1, r25	; 0x01
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46e:	83 36       	cpi	r24, 0x63	; 99
 470:	31 f0       	breq	.+12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 472:	83 37       	cpi	r24, 0x73	; 115
 474:	71 f0       	breq	.+28     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 476:	83 35       	cpi	r24, 0x53	; 83
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	55 c0       	rjmp	.+170    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 47c:	20 c0       	rjmp	.+64     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 47e:	f8 01       	movw	r30, r16
 480:	80 81       	ld	r24, Z
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	0e 5f       	subi	r16, 0xFE	; 254
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	88 24       	eor	r8, r8
 48a:	83 94       	inc	r8
 48c:	91 2c       	mov	r9, r1
 48e:	53 01       	movw	r10, r6
 490:	12 c0       	rjmp	.+36     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 492:	28 01       	movw	r4, r16
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	4f 0e       	add	r4, r31
 498:	51 1c       	adc	r5, r1
 49a:	f8 01       	movw	r30, r16
 49c:	a0 80       	ld	r10, Z
 49e:	b1 80       	ldd	r11, Z+1	; 0x01
 4a0:	36 fe       	sbrs	r3, 6
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a4:	69 2d       	mov	r22, r9
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	6f ef       	ldi	r22, 0xFF	; 255
 4ac:	7f ef       	ldi	r23, 0xFF	; 255
 4ae:	c5 01       	movw	r24, r10
 4b0:	4e d1       	rcall	.+668    	; 0x74e <strnlen>
 4b2:	4c 01       	movw	r8, r24
 4b4:	82 01       	movw	r16, r4
 4b6:	f3 2d       	mov	r31, r3
 4b8:	ff 77       	andi	r31, 0x7F	; 127
 4ba:	3f 2e       	mov	r3, r31
 4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4be:	28 01       	movw	r4, r16
 4c0:	22 e0       	ldi	r18, 0x02	; 2
 4c2:	42 0e       	add	r4, r18
 4c4:	51 1c       	adc	r5, r1
 4c6:	f8 01       	movw	r30, r16
 4c8:	a0 80       	ld	r10, Z
 4ca:	b1 80       	ldd	r11, Z+1	; 0x01
 4cc:	36 fe       	sbrs	r3, 6
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d0:	69 2d       	mov	r22, r9
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	6f ef       	ldi	r22, 0xFF	; 255
 4d8:	7f ef       	ldi	r23, 0xFF	; 255
 4da:	c5 01       	movw	r24, r10
 4dc:	2d d1       	rcall	.+602    	; 0x738 <strnlen_P>
 4de:	4c 01       	movw	r8, r24
 4e0:	f3 2d       	mov	r31, r3
 4e2:	f0 68       	ori	r31, 0x80	; 128
 4e4:	3f 2e       	mov	r3, r31
 4e6:	82 01       	movw	r16, r4
 4e8:	33 fc       	sbrc	r3, 3
 4ea:	19 c0       	rjmp	.+50     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4ec:	82 2d       	mov	r24, r2
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	88 16       	cp	r8, r24
 4f2:	99 06       	cpc	r9, r25
 4f4:	a0 f4       	brcc	.+40     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4f6:	b6 01       	movw	r22, r12
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	33 d1       	rcall	.+614    	; 0x764 <fputc>
 4fe:	2a 94       	dec	r2
 500:	f5 cf       	rjmp	.-22     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 502:	f5 01       	movw	r30, r10
 504:	37 fc       	sbrc	r3, 7
 506:	85 91       	lpm	r24, Z+
 508:	37 fe       	sbrs	r3, 7
 50a:	81 91       	ld	r24, Z+
 50c:	5f 01       	movw	r10, r30
 50e:	b6 01       	movw	r22, r12
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	28 d1       	rcall	.+592    	; 0x764 <fputc>
 514:	21 10       	cpse	r2, r1
 516:	2a 94       	dec	r2
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	82 1a       	sub	r8, r18
 51c:	91 08       	sbc	r9, r1
 51e:	81 14       	cp	r8, r1
 520:	91 04       	cpc	r9, r1
 522:	79 f7       	brne	.-34     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 524:	e1 c0       	rjmp	.+450    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 526:	84 36       	cpi	r24, 0x64	; 100
 528:	11 f0       	breq	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	89 36       	cpi	r24, 0x69	; 105
 52c:	39 f5       	brne	.+78     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 52e:	f8 01       	movw	r30, r16
 530:	37 fe       	sbrs	r3, 7
 532:	07 c0       	rjmp	.+14     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 534:	60 81       	ld	r22, Z
 536:	71 81       	ldd	r23, Z+1	; 0x01
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	93 81       	ldd	r25, Z+3	; 0x03
 53c:	0c 5f       	subi	r16, 0xFC	; 252
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
 540:	08 c0       	rjmp	.+16     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 542:	60 81       	ld	r22, Z
 544:	71 81       	ldd	r23, Z+1	; 0x01
 546:	07 2e       	mov	r0, r23
 548:	00 0c       	add	r0, r0
 54a:	88 0b       	sbc	r24, r24
 54c:	99 0b       	sbc	r25, r25
 54e:	0e 5f       	subi	r16, 0xFE	; 254
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	f3 2d       	mov	r31, r3
 554:	ff 76       	andi	r31, 0x6F	; 111
 556:	3f 2e       	mov	r3, r31
 558:	97 ff       	sbrs	r25, 7
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	f0 68       	ori	r31, 0x80	; 128
 56c:	3f 2e       	mov	r3, r31
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	a3 01       	movw	r20, r6
 574:	33 d1       	rcall	.+614    	; 0x7dc <__ultoa_invert>
 576:	88 2e       	mov	r8, r24
 578:	86 18       	sub	r8, r6
 57a:	44 c0       	rjmp	.+136    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 57c:	85 37       	cpi	r24, 0x75	; 117
 57e:	31 f4       	brne	.+12     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 580:	23 2d       	mov	r18, r3
 582:	2f 7e       	andi	r18, 0xEF	; 239
 584:	b2 2e       	mov	r11, r18
 586:	2a e0       	ldi	r18, 0x0A	; 10
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	25 c0       	rjmp	.+74     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 58c:	93 2d       	mov	r25, r3
 58e:	99 7f       	andi	r25, 0xF9	; 249
 590:	b9 2e       	mov	r11, r25
 592:	8f 36       	cpi	r24, 0x6F	; 111
 594:	c1 f0       	breq	.+48     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 596:	18 f4       	brcc	.+6      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 598:	88 35       	cpi	r24, 0x58	; 88
 59a:	79 f0       	breq	.+30     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 59c:	ae c0       	rjmp	.+348    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 59e:	80 37       	cpi	r24, 0x70	; 112
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a2:	88 37       	cpi	r24, 0x78	; 120
 5a4:	21 f0       	breq	.+8      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5a6:	a9 c0       	rjmp	.+338    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 5a8:	e9 2f       	mov	r30, r25
 5aa:	e0 61       	ori	r30, 0x10	; 16
 5ac:	be 2e       	mov	r11, r30
 5ae:	b4 fe       	sbrs	r11, 4
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5b2:	fb 2d       	mov	r31, r11
 5b4:	f4 60       	ori	r31, 0x04	; 4
 5b6:	bf 2e       	mov	r11, r31
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5ba:	34 fe       	sbrs	r3, 4
 5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5be:	29 2f       	mov	r18, r25
 5c0:	26 60       	ori	r18, 0x06	; 6
 5c2:	b2 2e       	mov	r11, r18
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c6:	28 e0       	ldi	r18, 0x08	; 8
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5cc:	20 e1       	ldi	r18, 0x10	; 16
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d2:	20 e1       	ldi	r18, 0x10	; 16
 5d4:	32 e0       	ldi	r19, 0x02	; 2
 5d6:	f8 01       	movw	r30, r16
 5d8:	b7 fe       	sbrs	r11, 7
 5da:	07 c0       	rjmp	.+14     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5dc:	60 81       	ld	r22, Z
 5de:	71 81       	ldd	r23, Z+1	; 0x01
 5e0:	82 81       	ldd	r24, Z+2	; 0x02
 5e2:	93 81       	ldd	r25, Z+3	; 0x03
 5e4:	0c 5f       	subi	r16, 0xFC	; 252
 5e6:	1f 4f       	sbci	r17, 0xFF	; 255
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5ea:	60 81       	ld	r22, Z
 5ec:	71 81       	ldd	r23, Z+1	; 0x01
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 5f       	subi	r16, 0xFE	; 254
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	a3 01       	movw	r20, r6
 5f8:	f1 d0       	rcall	.+482    	; 0x7dc <__ultoa_invert>
 5fa:	88 2e       	mov	r8, r24
 5fc:	86 18       	sub	r8, r6
 5fe:	fb 2d       	mov	r31, r11
 600:	ff 77       	andi	r31, 0x7F	; 127
 602:	3f 2e       	mov	r3, r31
 604:	36 fe       	sbrs	r3, 6
 606:	0d c0       	rjmp	.+26     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 608:	23 2d       	mov	r18, r3
 60a:	2e 7f       	andi	r18, 0xFE	; 254
 60c:	a2 2e       	mov	r10, r18
 60e:	89 14       	cp	r8, r9
 610:	58 f4       	brcc	.+22     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 612:	34 fe       	sbrs	r3, 4
 614:	0b c0       	rjmp	.+22     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 616:	32 fc       	sbrc	r3, 2
 618:	09 c0       	rjmp	.+18     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 61a:	83 2d       	mov	r24, r3
 61c:	8e 7e       	andi	r24, 0xEE	; 238
 61e:	a8 2e       	mov	r10, r24
 620:	05 c0       	rjmp	.+10     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 622:	b8 2c       	mov	r11, r8
 624:	a3 2c       	mov	r10, r3
 626:	03 c0       	rjmp	.+6      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 628:	b8 2c       	mov	r11, r8
 62a:	01 c0       	rjmp	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62c:	b9 2c       	mov	r11, r9
 62e:	a4 fe       	sbrs	r10, 4
 630:	0f c0       	rjmp	.+30     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 632:	fe 01       	movw	r30, r28
 634:	e8 0d       	add	r30, r8
 636:	f1 1d       	adc	r31, r1
 638:	80 81       	ld	r24, Z
 63a:	80 33       	cpi	r24, 0x30	; 48
 63c:	21 f4       	brne	.+8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 63e:	9a 2d       	mov	r25, r10
 640:	99 7e       	andi	r25, 0xE9	; 233
 642:	a9 2e       	mov	r10, r25
 644:	09 c0       	rjmp	.+18     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 646:	a2 fe       	sbrs	r10, 2
 648:	06 c0       	rjmp	.+12     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 64a:	b3 94       	inc	r11
 64c:	b3 94       	inc	r11
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 650:	8a 2d       	mov	r24, r10
 652:	86 78       	andi	r24, 0x86	; 134
 654:	09 f0       	breq	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 656:	b3 94       	inc	r11
 658:	a3 fc       	sbrc	r10, 3
 65a:	10 c0       	rjmp	.+32     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 65c:	a0 fe       	sbrs	r10, 0
 65e:	06 c0       	rjmp	.+12     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 660:	b2 14       	cp	r11, r2
 662:	80 f4       	brcc	.+32     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 664:	28 0c       	add	r2, r8
 666:	92 2c       	mov	r9, r2
 668:	9b 18       	sub	r9, r11
 66a:	0d c0       	rjmp	.+26     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 66c:	b2 14       	cp	r11, r2
 66e:	58 f4       	brcc	.+22     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 670:	b6 01       	movw	r22, r12
 672:	80 e2       	ldi	r24, 0x20	; 32
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	76 d0       	rcall	.+236    	; 0x764 <fputc>
 678:	b3 94       	inc	r11
 67a:	f8 cf       	rjmp	.-16     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 67c:	b2 14       	cp	r11, r2
 67e:	18 f4       	brcc	.+6      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 680:	2b 18       	sub	r2, r11
 682:	02 c0       	rjmp	.+4      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 684:	98 2c       	mov	r9, r8
 686:	21 2c       	mov	r2, r1
 688:	a4 fe       	sbrs	r10, 4
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 68c:	b6 01       	movw	r22, r12
 68e:	80 e3       	ldi	r24, 0x30	; 48
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	68 d0       	rcall	.+208    	; 0x764 <fputc>
 694:	a2 fe       	sbrs	r10, 2
 696:	16 c0       	rjmp	.+44     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 698:	a1 fc       	sbrc	r10, 1
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 69c:	88 e7       	ldi	r24, 0x78	; 120
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 6a2:	88 e5       	ldi	r24, 0x58	; 88
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	b6 01       	movw	r22, r12
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6aa:	8a 2d       	mov	r24, r10
 6ac:	86 78       	andi	r24, 0x86	; 134
 6ae:	51 f0       	breq	.+20     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6b0:	a1 fe       	sbrs	r10, 1
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b4:	8b e2       	ldi	r24, 0x2B	; 43
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b8:	80 e2       	ldi	r24, 0x20	; 32
 6ba:	a7 fc       	sbrc	r10, 7
 6bc:	8d e2       	ldi	r24, 0x2D	; 45
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	50 d0       	rcall	.+160    	; 0x764 <fputc>
 6c4:	89 14       	cp	r8, r9
 6c6:	30 f4       	brcc	.+12     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	4a d0       	rcall	.+148    	; 0x764 <fputc>
 6d0:	9a 94       	dec	r9
 6d2:	f8 cf       	rjmp	.-16     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6d4:	8a 94       	dec	r8
 6d6:	f3 01       	movw	r30, r6
 6d8:	e8 0d       	add	r30, r8
 6da:	f1 1d       	adc	r31, r1
 6dc:	80 81       	ld	r24, Z
 6de:	b6 01       	movw	r22, r12
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	40 d0       	rcall	.+128    	; 0x764 <fputc>
 6e4:	81 10       	cpse	r8, r1
 6e6:	f6 cf       	rjmp	.-20     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6e8:	22 20       	and	r2, r2
 6ea:	09 f4       	brne	.+2      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6ec:	4e ce       	rjmp	.-868    	; 0x38a <vfprintf+0x4c>
 6ee:	b6 01       	movw	r22, r12
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	37 d0       	rcall	.+110    	; 0x764 <fputc>
 6f6:	2a 94       	dec	r2
 6f8:	f7 cf       	rjmp	.-18     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 6fa:	f6 01       	movw	r30, r12
 6fc:	86 81       	ldd	r24, Z+6	; 0x06
 6fe:	97 81       	ldd	r25, Z+7	; 0x07
 700:	02 c0       	rjmp	.+4      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	9f ef       	ldi	r25, 0xFF	; 255
 706:	2b 96       	adiw	r28, 0x0b	; 11
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	0f 91       	pop	r16
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	bf 90       	pop	r11
 724:	af 90       	pop	r10
 726:	9f 90       	pop	r9
 728:	8f 90       	pop	r8
 72a:	7f 90       	pop	r7
 72c:	6f 90       	pop	r6
 72e:	5f 90       	pop	r5
 730:	4f 90       	pop	r4
 732:	3f 90       	pop	r3
 734:	2f 90       	pop	r2
 736:	08 95       	ret

00000738 <strnlen_P>:
 738:	fc 01       	movw	r30, r24
 73a:	05 90       	lpm	r0, Z+
 73c:	61 50       	subi	r22, 0x01	; 1
 73e:	70 40       	sbci	r23, 0x00	; 0
 740:	01 10       	cpse	r0, r1
 742:	d8 f7       	brcc	.-10     	; 0x73a <strnlen_P+0x2>
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	8e 0f       	add	r24, r30
 74a:	9f 1f       	adc	r25, r31
 74c:	08 95       	ret

0000074e <strnlen>:
 74e:	fc 01       	movw	r30, r24
 750:	61 50       	subi	r22, 0x01	; 1
 752:	70 40       	sbci	r23, 0x00	; 0
 754:	01 90       	ld	r0, Z+
 756:	01 10       	cpse	r0, r1
 758:	d8 f7       	brcc	.-10     	; 0x750 <strnlen+0x2>
 75a:	80 95       	com	r24
 75c:	90 95       	com	r25
 75e:	8e 0f       	add	r24, r30
 760:	9f 1f       	adc	r25, r31
 762:	08 95       	ret

00000764 <fputc>:
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	fb 01       	movw	r30, r22
 76e:	23 81       	ldd	r18, Z+3	; 0x03
 770:	21 fd       	sbrc	r18, 1
 772:	03 c0       	rjmp	.+6      	; 0x77a <fputc+0x16>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	2c c0       	rjmp	.+88     	; 0x7d2 <fputc+0x6e>
 77a:	22 ff       	sbrs	r18, 2
 77c:	16 c0       	rjmp	.+44     	; 0x7aa <fputc+0x46>
 77e:	46 81       	ldd	r20, Z+6	; 0x06
 780:	57 81       	ldd	r21, Z+7	; 0x07
 782:	24 81       	ldd	r18, Z+4	; 0x04
 784:	35 81       	ldd	r19, Z+5	; 0x05
 786:	42 17       	cp	r20, r18
 788:	53 07       	cpc	r21, r19
 78a:	44 f4       	brge	.+16     	; 0x79c <fputc+0x38>
 78c:	a0 81       	ld	r26, Z
 78e:	b1 81       	ldd	r27, Z+1	; 0x01
 790:	9d 01       	movw	r18, r26
 792:	2f 5f       	subi	r18, 0xFF	; 255
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	31 83       	std	Z+1, r19	; 0x01
 798:	20 83       	st	Z, r18
 79a:	8c 93       	st	X, r24
 79c:	26 81       	ldd	r18, Z+6	; 0x06
 79e:	37 81       	ldd	r19, Z+7	; 0x07
 7a0:	2f 5f       	subi	r18, 0xFF	; 255
 7a2:	3f 4f       	sbci	r19, 0xFF	; 255
 7a4:	37 83       	std	Z+7, r19	; 0x07
 7a6:	26 83       	std	Z+6, r18	; 0x06
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <fputc+0x6e>
 7aa:	8b 01       	movw	r16, r22
 7ac:	ec 01       	movw	r28, r24
 7ae:	fb 01       	movw	r30, r22
 7b0:	00 84       	ldd	r0, Z+8	; 0x08
 7b2:	f1 85       	ldd	r31, Z+9	; 0x09
 7b4:	e0 2d       	mov	r30, r0
 7b6:	09 95       	icall
 7b8:	89 2b       	or	r24, r25
 7ba:	e1 f6       	brne	.-72     	; 0x774 <fputc+0x10>
 7bc:	d8 01       	movw	r26, r16
 7be:	16 96       	adiw	r26, 0x06	; 6
 7c0:	8d 91       	ld	r24, X+
 7c2:	9c 91       	ld	r25, X
 7c4:	17 97       	sbiw	r26, 0x07	; 7
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	17 96       	adiw	r26, 0x07	; 7
 7ca:	9c 93       	st	X, r25
 7cc:	8e 93       	st	-X, r24
 7ce:	16 97       	sbiw	r26, 0x06	; 6
 7d0:	ce 01       	movw	r24, r28
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <__ultoa_invert>:
 7dc:	fa 01       	movw	r30, r20
 7de:	aa 27       	eor	r26, r26
 7e0:	28 30       	cpi	r18, 0x08	; 8
 7e2:	51 f1       	breq	.+84     	; 0x838 <__ultoa_invert+0x5c>
 7e4:	20 31       	cpi	r18, 0x10	; 16
 7e6:	81 f1       	breq	.+96     	; 0x848 <__ultoa_invert+0x6c>
 7e8:	e8 94       	clt
 7ea:	6f 93       	push	r22
 7ec:	6e 7f       	andi	r22, 0xFE	; 254
 7ee:	6e 5f       	subi	r22, 0xFE	; 254
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	af 4f       	sbci	r26, 0xFF	; 255
 7f8:	b1 e0       	ldi	r27, 0x01	; 1
 7fa:	3e d0       	rcall	.+124    	; 0x878 <__ultoa_invert+0x9c>
 7fc:	b4 e0       	ldi	r27, 0x04	; 4
 7fe:	3c d0       	rcall	.+120    	; 0x878 <__ultoa_invert+0x9c>
 800:	67 0f       	add	r22, r23
 802:	78 1f       	adc	r23, r24
 804:	89 1f       	adc	r24, r25
 806:	9a 1f       	adc	r25, r26
 808:	a1 1d       	adc	r26, r1
 80a:	68 0f       	add	r22, r24
 80c:	79 1f       	adc	r23, r25
 80e:	8a 1f       	adc	r24, r26
 810:	91 1d       	adc	r25, r1
 812:	a1 1d       	adc	r26, r1
 814:	6a 0f       	add	r22, r26
 816:	71 1d       	adc	r23, r1
 818:	81 1d       	adc	r24, r1
 81a:	91 1d       	adc	r25, r1
 81c:	a1 1d       	adc	r26, r1
 81e:	20 d0       	rcall	.+64     	; 0x860 <__ultoa_invert+0x84>
 820:	09 f4       	brne	.+2      	; 0x824 <__ultoa_invert+0x48>
 822:	68 94       	set
 824:	3f 91       	pop	r19
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	26 9f       	mul	r18, r22
 82a:	11 24       	eor	r1, r1
 82c:	30 19       	sub	r19, r0
 82e:	30 5d       	subi	r19, 0xD0	; 208
 830:	31 93       	st	Z+, r19
 832:	de f6       	brtc	.-74     	; 0x7ea <__ultoa_invert+0xe>
 834:	cf 01       	movw	r24, r30
 836:	08 95       	ret
 838:	46 2f       	mov	r20, r22
 83a:	47 70       	andi	r20, 0x07	; 7
 83c:	40 5d       	subi	r20, 0xD0	; 208
 83e:	41 93       	st	Z+, r20
 840:	b3 e0       	ldi	r27, 0x03	; 3
 842:	0f d0       	rcall	.+30     	; 0x862 <__ultoa_invert+0x86>
 844:	c9 f7       	brne	.-14     	; 0x838 <__ultoa_invert+0x5c>
 846:	f6 cf       	rjmp	.-20     	; 0x834 <__ultoa_invert+0x58>
 848:	46 2f       	mov	r20, r22
 84a:	4f 70       	andi	r20, 0x0F	; 15
 84c:	40 5d       	subi	r20, 0xD0	; 208
 84e:	4a 33       	cpi	r20, 0x3A	; 58
 850:	18 f0       	brcs	.+6      	; 0x858 <__ultoa_invert+0x7c>
 852:	49 5d       	subi	r20, 0xD9	; 217
 854:	31 fd       	sbrc	r19, 1
 856:	40 52       	subi	r20, 0x20	; 32
 858:	41 93       	st	Z+, r20
 85a:	02 d0       	rcall	.+4      	; 0x860 <__ultoa_invert+0x84>
 85c:	a9 f7       	brne	.-22     	; 0x848 <__ultoa_invert+0x6c>
 85e:	ea cf       	rjmp	.-44     	; 0x834 <__ultoa_invert+0x58>
 860:	b4 e0       	ldi	r27, 0x04	; 4
 862:	a6 95       	lsr	r26
 864:	97 95       	ror	r25
 866:	87 95       	ror	r24
 868:	77 95       	ror	r23
 86a:	67 95       	ror	r22
 86c:	ba 95       	dec	r27
 86e:	c9 f7       	brne	.-14     	; 0x862 <__ultoa_invert+0x86>
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	61 05       	cpc	r22, r1
 874:	71 05       	cpc	r23, r1
 876:	08 95       	ret
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	0a 2e       	mov	r0, r26
 87e:	06 94       	lsr	r0
 880:	57 95       	ror	r21
 882:	47 95       	ror	r20
 884:	37 95       	ror	r19
 886:	27 95       	ror	r18
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__ultoa_invert+0xa2>
 88c:	62 0f       	add	r22, r18
 88e:	73 1f       	adc	r23, r19
 890:	84 1f       	adc	r24, r20
 892:	95 1f       	adc	r25, r21
 894:	a0 1d       	adc	r26, r0
 896:	08 95       	ret

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
